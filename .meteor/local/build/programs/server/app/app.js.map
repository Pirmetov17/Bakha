{"version":3,"sources":["meteor://üíªapp/imports/api/tasks.js","meteor://üíªapp/server/main.js"],"names":["module","export","Tasks","Meteor","link","v","Mongo","check","Collection","isServer","publish","tasksPublication","find","$or","private","$ne","owner","userId","methods","text","String","Error","insert","createdAt","Date","username","users","findOne","taskId","task","remove","setChecked","Boolean","update","$set","checked","setToPrivate"],"mappings":"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","file":"/app.js","sourcesContent":["\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\nexport const Tasks = new Mongo.Collection('tasks');\n// this is api of tasks \n\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  // Only publish tasks that are public or belong to the current user\n  Meteor.publish('tasks', function tasksPublication() {\n    return Tasks.find({\n      $or: [\n        { private: { $ne: true } },\n        { owner: this.userId },\n      ],\n    });\n  });\n}\n// \nMeteor.methods({\n  'tasks.insert'(text) {\n    check(text, String);\n\n    // Make sure the user is logged in before inserting a task\n    if (! this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n//–æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —é–∑–µ—Ä–Ω—ç–π–º \n    Tasks.insert({\n      text,\n      createdAt: new Date(),\n      owner: this.userId,\n      username: Meteor.users.findOne(this.userId).username,\n    });\n  },\n  //–¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è\n  'tasks.remove'(taskId) {\n    check(taskId, String);\n\n    const task = Tasks.findOne(taskId);\n    if (task.private && task.owner !== this.userId) {\n      // If the task is private, make sure only the owner can delete it\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.remove(taskId);\n  },\n  //–∫–Ω–æ–ø–∫–∞ –≥–¥–µ –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –≥–∞–ª–æ—á–∫—É —á—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª —ç—Ç–æ –¥–µ–ª–∞ \n  'tasks.setChecked'(taskId, setChecked) {\n    check(taskId, String);\n    check(setChecked, Boolean);\n\n    const task = Tasks.findOne(taskId);\n    if (task.private && task.owner !== this.userId) {\n      // If the task is private, make sure only the owner can check it off\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.update(taskId, { $set: { checked: setChecked } });\n  },\n  //—Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º —á—Ç–æ–±—ã —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –≤–∏–¥–µ–ª —Å–≤–æ–π —Ç—É –¥—É –ª–∏—Å—Ç\n  'tasks.setPrivate'(taskId, setToPrivate) {\n    check(taskId, String);\n    check(setToPrivate, Boolean);\n\n    const task = Tasks.findOne(taskId);\n\n    // Make sure only the task owner can make a task private\n    if (task.owner !== this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.update(taskId, { $set: { private: setToPrivate } });\n  },\n});\n","import '../imports/api/tasks.js';\n//–∏–º–ø–æ—Ä—Ç–∏—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É "]}