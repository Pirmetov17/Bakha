{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/admin/simple-todos/packages/lmieulet:meteor-coverage/server/report/report-service.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/lmieulet:meteor-coverage/server/report/report-service.js","filename":"/Users/admin/simple-todos/packages/lmieulet:meteor-coverage/server/report/report-service.js","passPerPreset":false,"envName":"development","cwd":"/Users/admin/simple-todos","root":"/Users/admin/simple-todos","presets":[],"generatorOpts":{"filename":"/Users/admin/simple-todos/packages/lmieulet:meteor-coverage/server/report/report-service.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/lmieulet:meteor-coverage/server/report/report-service.js"}},"code":"let Log;\nmodule.link(\"./../context/log\", {\n  default(v) {\n    Log = v;\n  }\n\n}, 0);\nlet Conf;\nmodule.link(\"./../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 1);\nlet IstanbulGenericReporter;\nmodule.link(\"./report-generic\", {\n  default(v) {\n    IstanbulGenericReporter = v;\n  }\n\n}, 2);\nlet JsonSummary;\nmodule.link(\"./report-json-summary\", {\n  default(v) {\n    JsonSummary = v;\n  }\n\n}, 3);\nlet Html;\nmodule.link(\"./report-html\", {\n  default(v) {\n    Html = v;\n  }\n\n}, 4);\nlet Http;\nmodule.link(\"./report-http\", {\n  default(v) {\n    Http = v;\n  }\n\n}, 5);\nlet ReportCoverage;\nmodule.link(\"./report-coverage\", {\n  default(v) {\n    ReportCoverage = v;\n  }\n\n}, 6);\nlet ReportRemap;\nmodule.link(\"./report-remap\", {\n  default(v) {\n    ReportRemap = v;\n  }\n\n}, 7);\nlet TextSummary;\nmodule.link(\"./report-text-summary\", {\n  default(v) {\n    TextSummary = v;\n  }\n\n}, 8);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 9);\nmodule.exportDefault(class {\n  generateReport(res, type, options) {\n    options = Object.assign({}, {\n      path: path.join(Conf.COVERAGE_APP_FOLDER, Conf.COVERAGE_EXPORT_FOLDER),\n\n      /* istanbul ignore next: ternary operator */\n      verbose: Log.COVERAGE_VERBOSE ? true : false\n    }, options);\n    Log.info('export coverage using the following format [', type, '] options [', options, ']');\n\n    try {\n      switch (type) {\n        case 'remap':\n          {\n            let reportRemap = new ReportRemap(res, type, options);\n            reportRemap.generate();\n            break;\n          }\n\n        case 'lcovonly':\n          {\n            options = this.addFileToOptions(options, 'lcov.info');\n            let istanbulFile1 = new IstanbulGenericReporter(res, type, options);\n            istanbulFile1.generate();\n            break;\n          }\n\n        case 'json':\n          {\n            options = this.addFileToOptions(options, 'summary.json');\n            let istanbulFile2 = new IstanbulGenericReporter(res, type, options);\n            istanbulFile2.generate();\n            break;\n          }\n\n        case 'coverage':\n          {\n            options = this.addFileToOptions(options, 'report.json');\n            let reportCoverage = new ReportCoverage(res, options);\n            reportCoverage.generate();\n            break;\n          }\n\n        /*case 'teamcity':\r\n          {\r\n            options = this.addFileToOptions(options, 'teamcity.log');\r\n            let teamcity = new Teamcity(res, options);\r\n            teamcity.generate();\r\n            break;\r\n          }*/\n\n        case 'json-summary':\n          {\n            options = this.addFileToOptions(options, 'json_summary.json');\n            let jsonSummary = new JsonSummary(res, type, options);\n            jsonSummary.generate();\n            break;\n          }\n\n        case 'html':\n          {\n            options = Object.assign({}, {\n              'prefix': '/coverage/'\n            }, options);\n            let html = new Html(res, options);\n            html.generate();\n            break;\n          }\n\n        case 'text-summary':\n          {\n            options = this.addFileToOptions(options, 'summary.txt');\n            let textSummary = new TextSummary(res, type, options);\n            textSummary.generate();\n            break;\n          }\n\n        case 'http':\n          {\n            let http = new Http(res, options);\n            http.generate();\n            break;\n          }\n\n        default:\n          {\n            Log.error('Failed to export - this type is not implemented yet');\n            res.writeHead(400);\n            res.end('{\"type\":\"This type [' + type + '] is not supported\"}');\n          }\n      }\n    } catch (e) {\n      Log.error('ReportService failed while creating report type [', type, ']');\n      console.error(e, e.stack);\n      res.writeHead(400);\n      res.end('{\"type\":\"error\",\"message\":\"Unexpected error\"}');\n    }\n  }\n\n  addFileToOptions(options, filename) {\n    return Object.assign({}, options, {\n      path: path.join(options.path, filename)\n    });\n  }\n\n});","map":{"version":3,"sources":["packages/lmieulet:meteor-coverage/server/report/report-service.js"],"names":["Log","module","link","default","v","Conf","IstanbulGenericReporter","JsonSummary","Html","Http","ReportCoverage","ReportRemap","TextSummary","path","exportDefault","generateReport","res","type","options","Object","assign","join","COVERAGE_APP_FOLDER","COVERAGE_EXPORT_FOLDER","verbose","COVERAGE_VERBOSE","info","reportRemap","generate","addFileToOptions","istanbulFile1","istanbulFile2","reportCoverage","jsonSummary","html","textSummary","http","error","writeHead","end","e","console","stack","filename"],"mappings":"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","sourcesContent":["import Log from './../context/log';\r\nimport Conf from './../context/conf';\r\nimport IstanbulGenericReporter from './report-generic';\r\nimport JsonSummary from './report-json-summary';\r\n// import Teamcity from './report-teamcity';\r\nimport Html from './report-html';\r\nimport Http from './report-http';\r\nimport ReportCoverage from './report-coverage';\r\nimport ReportRemap from './report-remap';\r\nimport TextSummary from './report-text-summary';\r\nimport path from 'path';\r\n\r\nexport default class {\r\n  generateReport(res, type, options) {\r\n\r\n    options = Object.assign({}, {\r\n      path: path.join(Conf.COVERAGE_APP_FOLDER, Conf.COVERAGE_EXPORT_FOLDER),\r\n      /* istanbul ignore next: ternary operator */\r\n      verbose: Log.COVERAGE_VERBOSE ? true : false\r\n    }, options);\r\n\r\n    Log.info('export coverage using the following format [', type, '] options [', options, ']');\r\n    try {\r\n      switch (type) {\r\n      case 'remap':\r\n        {\r\n          let reportRemap = new ReportRemap(res, type, options);\r\n          reportRemap.generate();\r\n          break;\r\n        }\r\n      case 'lcovonly':\r\n        {\r\n          options = this.addFileToOptions(options, 'lcov.info');\r\n          let istanbulFile1 = new IstanbulGenericReporter(res, type, options);\r\n          istanbulFile1.generate();\r\n          break;\r\n        }\r\n      case 'json':\r\n        {\r\n          options = this.addFileToOptions(options, 'summary.json');\r\n          let istanbulFile2 = new IstanbulGenericReporter(res, type, options);\r\n          istanbulFile2.generate();\r\n          break;\r\n        }\r\n      case 'coverage':\r\n        {\r\n          options = this.addFileToOptions(options, 'report.json');\r\n          let reportCoverage = new ReportCoverage(res, options);\r\n          reportCoverage.generate();\r\n          break;\r\n        }\r\n      /*case 'teamcity':\r\n        {\r\n          options = this.addFileToOptions(options, 'teamcity.log');\r\n          let teamcity = new Teamcity(res, options);\r\n          teamcity.generate();\r\n          break;\r\n        }*/\r\n      case 'json-summary':\r\n        {\r\n          options = this.addFileToOptions(options, 'json_summary.json');\r\n          let jsonSummary = new JsonSummary(res, type, options);\r\n          jsonSummary.generate();\r\n          break;\r\n        }\r\n      case 'html':\r\n        {\r\n          options = Object.assign({}, {\r\n            'prefix': '/coverage/'\r\n          }, options);\r\n          let html = new Html(res, options);\r\n          html.generate();\r\n          break;\r\n        }\r\n      case 'text-summary':\r\n        {\r\n          options = this.addFileToOptions(options, 'summary.txt');\r\n          let textSummary = new TextSummary(res, type, options);\r\n          textSummary.generate();\r\n          break;\r\n        }\r\n      case 'http':\r\n        {\r\n          let http = new Http(res, options);\r\n          http.generate();\r\n          break;\r\n        }\r\n      default:\r\n        {\r\n          Log.error('Failed to export - this type is not implemented yet');\r\n          res.writeHead(400);\r\n          res.end('{\"type\":\"This type [' + type + '] is not supported\"}');\r\n        }\r\n      }\r\n    } catch (e) {\r\n      Log.error('ReportService failed while creating report type [', type, ']');\r\n      console.error(e, e.stack);\r\n      res.writeHead(400);\r\n      res.end('{\"type\":\"error\",\"message\":\"Unexpected error\"}');\r\n    }\r\n  }\r\n  addFileToOptions(options, filename) {\r\n    return Object.assign({}, options, {\r\n      path: path.join(options.path, filename)\r\n    });\r\n  }\r\n}\r\n"]},"sourceType":"script","hash":"af8f1f8e045b1ba9e99acd11b1c62a54a582d46b"}
