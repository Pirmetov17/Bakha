{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/admin/simple-todos/packages/meteortesting:browser-tests/browser/puppeteer.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/meteortesting:browser-tests/browser/puppeteer.js","filename":"/Users/admin/simple-todos/packages/meteortesting:browser-tests/browser/puppeteer.js","passPerPreset":false,"envName":"development","cwd":"/Users/admin/simple-todos","root":"/Users/admin/simple-todos","presets":[],"generatorOpts":{"filename":"/Users/admin/simple-todos/packages/meteortesting:browser-tests/browser/puppeteer.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/meteortesting:browser-tests/browser/puppeteer.js"}},"code":"module.export({\n  default: () => startPuppeteer\n});\n\n/**\n * All browser drivers must do the following things:\n * - Open a page to ROOT_URL\n * - send all console messages to the stdout function\n * - send all errors to the stderr function, only when window.testsAreRunning is false\n * - When window.testsDone becomes true, call `done` with window.testFailures argument\n * - As a safeguard, exit with code 2 if there hasn't been console output\n *   for 30 seconds.\n */\nconst util = require('util');\n\nfunction startPuppeteer({\n  stdout,\n  stderr,\n  done\n}) {\n  let puppeteer;\n\n  try {\n    puppeteer = require('puppeteer');\n  } catch (error) {\n    console.error(error);\n    throw new Error('When running app tests with TEST_BROWSER_DRIVER=puppeteer, you must first ' + '\"npm i --save-dev puppeteer@^1.2.0\"');\n  }\n\n  function runTests() {\n    return Promise.asyncApply(() => {\n      // --no-sandbox and --disable-setuid-sandbox allow this to easily run in docker\n      const browser = Promise.await(puppeteer.launch({\n        args: ['--no-sandbox', '--disable-setuid-sandbox']\n      }));\n      console.log(Promise.await(browser.version()));\n      const page = Promise.await(browser.newPage()); // console message args come in as handles, use this to evaluate them all\n\n      function evaluateHandles(msg) {\n        return Promise.asyncApply(() => {\n          return Promise.await(Promise.all(msg.args().map(arg => page.evaluate(h => h.toString(), arg)))).join(' ');\n        });\n      }\n\n      page.on('console', msg => Promise.asyncApply(() => {\n        // this is racy but how else to do it?\n        const testsAreRunning = Promise.await(page.evaluate('window.testsAreRunning'));\n\n        if (msg.type() === 'error' && !testsAreRunning) {\n          stderr(Promise.await(evaluateHandles(msg)));\n        } else {\n          stdout(Promise.await(evaluateHandles(msg)));\n        }\n      }));\n      Promise.await(page.goto(process.env.ROOT_URL));\n      Promise.await(page.waitFor(() => window.testsDone));\n      const testFailures = Promise.await(page.evaluate('window.testFailures'));\n      Promise.await(page.close());\n      Promise.await(browser.close());\n      done(testFailures);\n    });\n  }\n\n  runTests();\n}","map":{"version":3,"sources":["packages/meteortesting:browser-tests/browser/puppeteer.js"],"names":["module","export","default","startPuppeteer","util","require","stdout","stderr","done","puppeteer","error","console","Error","runTests","browser","launch","args","log","version","page","newPage","evaluateHandles","msg","Promise","all","map","arg","evaluate","h","toString","join","on","testsAreRunning","type","goto","process","env","ROOT_URL","waitFor","window","testsDone","testFailures","close"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,OAAO,EAAC,MAAIC;AAAb,CAAd;;AAAA;;;;;;;;;AASA,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAEe,SAASF,cAAT,CAAwB;AACrCG,EAAAA,MADqC;AAErCC,EAAAA,MAFqC;AAGrCC,EAAAA;AAHqC,CAAxB,EAIZ;AACD,MAAIC,SAAJ;;AACA,MAAI;AACFA,IAAAA,SAAS,GAAGJ,OAAO,CAAC,WAAD,CAAnB;AACD,GAFD,CAEE,OAAOK,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAM,IAAIE,KAAJ,CACJ,+EACA,qCAFI,CAAN;AAID;;AAED,WAAeC,QAAf;AAAA,oCAA0B;AACxB;AACA,YAAMC,OAAO,iBAASL,SAAS,CAACM,MAAV,CAAiB;AAAEC,QAAAA,IAAI,EAAE,CAAC,cAAD,EAAiB,0BAAjB;AAAR,OAAjB,CAAT,CAAb;AACAL,MAAAA,OAAO,CAACM,GAAR,eAAkBH,OAAO,CAACI,OAAR,EAAlB;AACA,YAAMC,IAAI,iBAASL,OAAO,CAACM,OAAR,EAAT,CAAV,CAJwB,CAMxB;;AACA,eAAeC,eAAf,CAAgCC,GAAhC;AAAA,wCAAqC;AACnC,iBAAO,cAAOC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACN,IAAJ,GAAWS,GAAX,CAAeC,GAAG,IAAIP,IAAI,CAACQ,QAAL,CAAcC,CAAC,IAAIA,CAAC,CAACC,QAAF,EAAnB,EAAiCH,GAAjC,CAAtB,CAAZ,CAAP,EACJI,IADI,CACC,GADD,CAAP;AAED,SAHD;AAAA;;AAKAX,MAAAA,IAAI,CAACY,EAAL,CAAQ,SAAR,EAA0BT,GAAP,6BAAe;AAChC;AACA,cAAMU,eAAe,iBAASb,IAAI,CAACQ,QAAL,CAAc,wBAAd,CAAT,CAArB;;AACA,YAAIL,GAAG,CAACW,IAAJ,OAAe,OAAf,IAA0B,CAACD,eAA/B,EAAgD;AAC9CzB,UAAAA,MAAM,eAAOc,eAAe,CAACC,GAAD,CAAtB,EAAN;AACD,SAFD,MAEO;AACLhB,UAAAA,MAAM,eAAOe,eAAe,CAACC,GAAD,CAAtB,EAAN;AACD;AACF,OARkB,CAAnB;AAUA,oBAAMH,IAAI,CAACe,IAAL,CAAUC,OAAO,CAACC,GAAR,CAAYC,QAAtB,CAAN;AAEA,oBAAMlB,IAAI,CAACmB,OAAL,CAAa,MAAMC,MAAM,CAACC,SAA1B,CAAN;AACA,YAAMC,YAAY,iBAAStB,IAAI,CAACQ,QAAL,CAAc,qBAAd,CAAT,CAAlB;AAEA,oBAAMR,IAAI,CAACuB,KAAL,EAAN;AACA,oBAAM5B,OAAO,CAAC4B,KAAR,EAAN;AAEAlC,MAAAA,IAAI,CAACiC,YAAD,CAAJ;AACD,KA/BD;AAAA;;AAiCA5B,EAAAA,QAAQ;AACT","sourcesContent":["/**\n * All browser drivers must do the following things:\n * - Open a page to ROOT_URL\n * - send all console messages to the stdout function\n * - send all errors to the stderr function, only when window.testsAreRunning is false\n * - When window.testsDone becomes true, call `done` with window.testFailures argument\n * - As a safeguard, exit with code 2 if there hasn't been console output\n *   for 30 seconds.\n */\nconst util = require('util');\n\nexport default function startPuppeteer({\n  stdout,\n  stderr,\n  done,\n}) {\n  let puppeteer;\n  try {\n    puppeteer = require('puppeteer');\n  } catch (error) {\n    console.error(error);\n    throw new Error(\n      'When running app tests with TEST_BROWSER_DRIVER=puppeteer, you must first ' +\n      '\"npm i --save-dev puppeteer@^1.2.0\"'\n    );\n  }\n\n  async function runTests() {\n    // --no-sandbox and --disable-setuid-sandbox allow this to easily run in docker\n    const browser = await puppeteer.launch({ args: ['--no-sandbox', '--disable-setuid-sandbox'] });\n    console.log(await browser.version());\n    const page = await browser.newPage();\n\n    // console message args come in as handles, use this to evaluate them all\n    async function evaluateHandles (msg) {\n      return (await Promise.all(msg.args().map(arg => page.evaluate(h => h.toString(), arg))))\n        .join(' ');\n    }\n\n    page.on('console', async (msg) => {\n      // this is racy but how else to do it?\n      const testsAreRunning = await page.evaluate('window.testsAreRunning');\n      if (msg.type() === 'error' && !testsAreRunning) {\n        stderr(await evaluateHandles(msg));\n      } else {\n        stdout(await evaluateHandles(msg));\n      }\n    });\n\n    await page.goto(process.env.ROOT_URL);\n\n    await page.waitFor(() => window.testsDone);\n    const testFailures = await page.evaluate('window.testFailures');\n\n    await page.close();\n    await browser.close();\n\n    done(testFailures);\n  }\n\n  runTests();\n}\n"]},"sourceType":"script","hash":"67059282fa7e7c0226d7b74e79b8db99ff912354"}
