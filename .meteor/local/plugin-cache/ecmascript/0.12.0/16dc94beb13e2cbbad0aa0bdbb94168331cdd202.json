{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/admin/simple-todos/packages/lmieulet:meteor-coverage/server/report/report-remap.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/lmieulet:meteor-coverage/server/report/report-remap.js","filename":"/Users/admin/simple-todos/packages/lmieulet:meteor-coverage/server/report/report-remap.js","passPerPreset":false,"envName":"development","cwd":"/Users/admin/simple-todos","root":"/Users/admin/simple-todos","presets":[],"generatorOpts":{"filename":"/Users/admin/simple-todos/packages/lmieulet:meteor-coverage/server/report/report-remap.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/lmieulet:meteor-coverage/server/report/report-remap.js"}},"code":"let Conf;\nmodule.link(\"./../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 0);\nlet Log;\nmodule.link(\"./../context/log\", {\n  default(v) {\n    Log = v;\n  }\n\n}, 1);\nlet ReportCommon;\nmodule.link(\"./report-common\", {\n  default(v) {\n    ReportCommon = v;\n  }\n\n}, 2);\nlet IstanbulGenericReporter;\nmodule.link(\"./report-generic\", {\n  default(v) {\n    IstanbulGenericReporter = v;\n  }\n\n}, 3);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 4);\n\nconst remapIstanbul = Npm.require('remap-istanbul');\n\nconst MemoryStore = Npm.require('istanbul/lib/store/memory');\n\nmodule.exportDefault(class {\n  constructor(res, type, options) {\n    this.res = res; // Common options\n\n    this.options = options; // JSON report options\n\n    this.pathJSON = path.join(this.options.path, 'summary.json'); // remap-istanbul options\n\n    this.remapFolder = path.join(Conf.COVERAGE_EXPORT_FOLDER, '.remap');\n    this.remapPath = path.join(Conf.COVERAGE_APP_FOLDER, this.remapFolder);\n  }\n\n  generateJSONReport() {\n    const jsonOptions = Object.assign({}, this.options, {\n      path: this.pathJSON\n    });\n    let jsonReport = new IstanbulGenericReporter(this.res, 'json', jsonOptions);\n    jsonReport.generate();\n  }\n\n  getFilePath(filename) {\n    return path.join(this.remapFolder, filename);\n  }\n\n  generate() {\n    // We cannot rely on a previous coverage analysis JSON report,\n    // so we force its generation here before remapping\n    this.generateJSONReport();\n    const cwd = process.cwd();\n    process.chdir(Conf.COVERAGE_APP_FOLDER); // Create output directory if not exists\n\n    ReportCommon.checkDirectory(this.remapPath);\n    let reports = {},\n        allReports = {\n      'html': this.remapPath,\n      'clover': this.getFilePath('clover.xml'),\n      'cobertura': this.getFilePath('cobertura.xml'),\n      'teamcity': this.getFilePath('teamcity.log'),\n      'text-summary': this.getFilePath('summary.txt'),\n      'text': this.getFilePath('report.txt'),\n      'lcovonly': this.getFilePath('lcov.info'),\n      'json-summary': this.getFilePath('summary.json'),\n      'json': this.getFilePath('report.json')\n    };\n    Conf.remapFormat.forEach(type => reports[type] = allReports[type]);\n    this.remapWrapper(this.pathJSON, reports, this.options).await();\n    this.res.end('{\"type\":\"success\"}'); // Restore previous working directory\n\n    process.chdir(cwd);\n  }\n\n  remapWrapper(sources, reports, options) {\n    let sourceStore = new MemoryStore();\n    let collector = remapIstanbul.remap(remapIstanbul.loadCoverage(sources), {\n      sources: sourceStore,\n      warn: function () {}\n    });\n    /* istanbul ignore else */\n\n    if (!Object.keys(sourceStore.map).length) {\n      sourceStore = undefined;\n    }\n\n    let p = Object.keys(reports).map(reportType => {\n      let reportOptions = Object.assign({}, this.options, {\n        verbose: reportType === 'html' ? false : true\n      });\n      return remapIstanbul.writeReport(collector, reportType, reportOptions, reports[reportType], sourceStore);\n    });\n    return Promise.all(p);\n  }\n\n});","map":{"version":3,"sources":["packages/lmieulet:meteor-coverage/server/report/report-remap.js"],"names":["Conf","module","link","default","v","Log","ReportCommon","IstanbulGenericReporter","path","remapIstanbul","Npm","require","MemoryStore","exportDefault","constructor","res","type","options","pathJSON","join","remapFolder","COVERAGE_EXPORT_FOLDER","remapPath","COVERAGE_APP_FOLDER","generateJSONReport","jsonOptions","Object","assign","jsonReport","generate","getFilePath","filename","cwd","process","chdir","checkDirectory","reports","allReports","remapFormat","forEach","remapWrapper","await","end","sources","sourceStore","collector","remap","loadCoverage","warn","keys","map","length","undefined","p","reportType","reportOptions","verbose","writeReport","Promise","all"],"mappings":"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","sourcesContent":["import Conf from './../context/conf';\r\nimport Log from './../context/log';\r\nimport ReportCommon from './report-common';\r\nimport IstanbulGenericReporter from './report-generic';\r\nimport path from 'path';\r\nconst remapIstanbul = Npm.require('remap-istanbul');\r\nconst MemoryStore = Npm.require('istanbul/lib/store/memory');\r\n\r\n\r\nexport default class {\r\n  constructor(res, type, options) {\r\n    this.res = res;\r\n\r\n    // Common options\r\n    this.options = options;\r\n\r\n    // JSON report options\r\n    this.pathJSON = path.join(this.options.path, 'summary.json');\r\n\r\n    // remap-istanbul options\r\n    this.remapFolder = path.join(Conf.COVERAGE_EXPORT_FOLDER, '.remap');\r\n    this.remapPath = path.join(Conf.COVERAGE_APP_FOLDER, this.remapFolder);\r\n  }\r\n\r\n  generateJSONReport() {\r\n    const jsonOptions = Object.assign({}, this.options, {path: this.pathJSON});\r\n    let jsonReport = new IstanbulGenericReporter(this.res, 'json', jsonOptions);\r\n    jsonReport.generate();\r\n  }\r\n\r\n  getFilePath(filename) {\r\n    return path.join(this.remapFolder, filename);\r\n  }\r\n\r\n  generate() {\r\n    // We cannot rely on a previous coverage analysis JSON report,\r\n    // so we force its generation here before remapping\r\n    this.generateJSONReport();\r\n\r\n    const cwd = process.cwd();\r\n    process.chdir(Conf.COVERAGE_APP_FOLDER);\r\n\r\n    // Create output directory if not exists\r\n    ReportCommon.checkDirectory(this.remapPath);\r\n\r\n    let reports = {}, allReports = {\r\n        'html': this.remapPath,\r\n        'clover': this.getFilePath('clover.xml'),\r\n        'cobertura': this.getFilePath('cobertura.xml'),\r\n        'teamcity': this.getFilePath('teamcity.log'),\r\n        'text-summary': this.getFilePath('summary.txt'),\r\n        'text': this.getFilePath('report.txt'),\r\n        'lcovonly': this.getFilePath('lcov.info'),\r\n        'json-summary': this.getFilePath('summary.json'),\r\n        'json': this.getFilePath('report.json')\r\n      };\r\n    Conf.remapFormat.forEach((type) => reports[type] = allReports[type]);\r\n    this.remapWrapper(this.pathJSON, reports, this.options).await();\r\n    this.res.end('{\"type\":\"success\"}');\r\n\r\n    // Restore previous working directory\r\n    process.chdir(cwd);\r\n  }\r\n\r\n  remapWrapper(sources, reports, options) {\r\n    let sourceStore = new MemoryStore();\r\n    let collector = remapIstanbul.remap(remapIstanbul.loadCoverage(sources), {\r\n      sources: sourceStore,\r\n      warn: function() {}\r\n    });\r\n\r\n    /* istanbul ignore else */\r\n    if (!Object.keys(sourceStore.map).length) {\r\n      sourceStore = undefined;\r\n    }\r\n\r\n    let p = Object.keys(reports).map((reportType) => {\r\n      let reportOptions = Object.assign({}, this.options, {verbose: reportType === 'html' ? false : true});\r\n      return remapIstanbul.writeReport(collector, reportType, reportOptions, reports[reportType], sourceStore);\r\n    });\r\n\r\n    return Promise.all(p);\r\n  }\r\n}\r\n"]},"sourceType":"script","hash":"16dc94beb13e2cbbad0aa0bdbb94168331cdd202"}
