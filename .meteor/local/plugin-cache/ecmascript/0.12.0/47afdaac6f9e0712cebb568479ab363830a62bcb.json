{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/admin/simple-todos/packages/lmieulet:meteor-coverage/server/services/coverage-data.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/lmieulet:meteor-coverage/server/services/coverage-data.js","filename":"/Users/admin/simple-todos/packages/lmieulet:meteor-coverage/server/services/coverage-data.js","passPerPreset":false,"envName":"development","cwd":"/Users/admin/simple-todos","root":"/Users/admin/simple-todos","presets":[],"generatorOpts":{"filename":"/Users/admin/simple-todos/packages/lmieulet:meteor-coverage/server/services/coverage-data.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/lmieulet:meteor-coverage/server/services/coverage-data.js"}},"code":"let Conf;\nmodule.link(\"./../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 0);\nlet Instrumenter;\nmodule.link(\"./instrumenter\", {\n  default(v) {\n    Instrumenter = v;\n  }\n\n}, 1);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 2);\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 3);\n\nconst istanbulAPI = Npm.require('istanbul-api');\n\nconst Report = istanbulAPI.libReport;\nconst Coverage = istanbulAPI.libCoverage;\nmodule.exportDefault(CoverageData = {\n  filterCoverageReport: function (report) {\n    /* istanbul ignore else */\n    if (!report.data) {\n      throw 'Invalid report';\n    }\n\n    let newData = {};\n\n    for (let property in report.data) {\n      /* istanbul ignore else */\n      if (report.data.hasOwnProperty(property)) {\n        if (this.isAccepted(property)) {\n          newData[property] = report.data[property];\n        } else {\n          Log.info('isRefused', property);\n        }\n      }\n    }\n\n    report.data = newData;\n    return report;\n  },\n  isAccepted: function (filename) {\n    // Check if the file was also inside a .map\n\n    /* istanbul ignore else */\n    if (filename.indexOf(Conf.COVERAGE_APP_FOLDER) < 0) {\n      return false;\n    }\n\n    let isAServerSideFile = filename.indexOf('client') === -1 && filename.indexOf('web.browser') === -1;\n    /* istanbul ignore else */\n\n    if (Instrumenter.shouldIgnore(filename, isAServerSideFile)) {\n      return false;\n    }\n    /* istanbul ignore else */\n\n\n    if (filename.indexOf('packages/') > 0) {\n      Log.time('read access ' + filename);\n      const isExist = fs.existsSync(filename);\n      Log.timeEnd('read access ' + filename);\n      /* istanbul ignore else */\n\n      if (isExist) {\n        // Internal package\n        return true;\n      }\n    }\n    /* istanbul ignore else */\n\n\n    if (filename.indexOf('client/') > 0 && filename.indexOf('template.') > 0) {\n      /* istanbul ignore else */\n      if (fs.existsSync(filename)) {\n        // some file\n        return true;\n      } // this is a html template transformed into js file\n\n\n      return false;\n    }\n    /* istanbul ignore else */\n\n\n    if (filename.indexOf('node_modules') > 0) {\n      // this is a browser file?\n      return false;\n    }\n\n    return true;\n  },\n  getReport: function (coverage) {\n    let coverageMap = Coverage.createCoverageMap(coverage);\n    coverageMap = SourceMap.lib.transformCoverage(coverageMap).map;\n    coverageMap = this.filterCoverageReport(coverageMap);\n    return coverageMap;\n  },\n  getFileReport: function (coverage, filePath) {\n    const coverageMap = this.getReport(coverage);\n    const node = Report.summarizers.flat(coverageMap);\n    const childs = node.getRoot().getChildren();\n    let child;\n\n    for (let i = 0; i < childs.length; i++) {\n      /* istanbul ignore else */\n      if (childs[i].getRelativeName() === filePath) {\n        child = childs[i];\n      }\n    }\n\n    return child;\n  },\n  getTreeReport: function (coverage) {\n    return this.getNodeReport(coverage).getRoot();\n  },\n  getLcovonlyReport: function (coverage) {\n    return this.getTreeReport(coverage).getChildren();\n  },\n  getNodeReport: function (coverage) {\n    const coverageMap = this.getReport(coverage);\n    return Report.summarizers.flat(coverageMap);\n  }\n});","map":{"version":3,"sources":["packages/lmieulet:meteor-coverage/server/services/coverage-data.js"],"names":["Conf","module","link","default","v","Instrumenter","path","fs","istanbulAPI","Npm","require","Report","libReport","Coverage","libCoverage","exportDefault","CoverageData","filterCoverageReport","report","data","newData","property","hasOwnProperty","isAccepted","Log","info","filename","indexOf","COVERAGE_APP_FOLDER","isAServerSideFile","shouldIgnore","time","isExist","existsSync","timeEnd","getReport","coverage","coverageMap","createCoverageMap","SourceMap","lib","transformCoverage","map","getFileReport","filePath","node","summarizers","flat","childs","getRoot","getChildren","child","i","length","getRelativeName","getTreeReport","getNodeReport","getLcovonlyReport"],"mappings":"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","sourcesContent":["import Conf from './../context/conf';\r\nimport Instrumenter from './instrumenter';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\n\r\nconst istanbulAPI = Npm.require('istanbul-api');\r\nconst Report = istanbulAPI.libReport;\r\nconst Coverage = istanbulAPI.libCoverage;\r\n\r\nexport default CoverageData = {\r\n  filterCoverageReport: function (report) {\r\n    /* istanbul ignore else */\r\n    if (!report.data) {\r\n      throw 'Invalid report';\r\n    }\r\n    let newData = {};\r\n    for (let property in report.data) {\r\n      /* istanbul ignore else */\r\n      if (report.data.hasOwnProperty(property)) {\r\n        if (this.isAccepted(property)) {\r\n          newData[property] = report.data[property];\r\n        } else {\r\n          Log.info('isRefused', property);\r\n        }\r\n      }\r\n    }\r\n    report.data = newData;\r\n    return report;\r\n  },\r\n  isAccepted: function (filename) {\r\n    // Check if the file was also inside a .map\r\n    /* istanbul ignore else */\r\n    if (filename.indexOf(Conf.COVERAGE_APP_FOLDER) < 0) {\r\n      return false;\r\n    }\r\n\r\n    let isAServerSideFile = filename.indexOf('client') === -1 && filename.indexOf('web.browser') === -1;\r\n    /* istanbul ignore else */\r\n    if (Instrumenter.shouldIgnore(filename, isAServerSideFile)) {\r\n      return false;\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (filename.indexOf('packages/') > 0) {\r\n      Log.time('read access ' + filename);\r\n      const isExist = fs.existsSync(filename);\r\n      Log.timeEnd('read access ' + filename);\r\n      /* istanbul ignore else */\r\n      if (isExist) {\r\n        // Internal package\r\n        return true;\r\n      }\r\n    }\r\n    /* istanbul ignore else */\r\n    if (filename.indexOf('client/') > 0 && filename.indexOf('template.') > 0) {\r\n      /* istanbul ignore else */\r\n      if (fs.existsSync(filename)) {\r\n        // some file\r\n        return true;\r\n      }\r\n      // this is a html template transformed into js file\r\n      return false;\r\n    }\r\n    /* istanbul ignore else */\r\n    if (filename.indexOf('node_modules') > 0) {\r\n      // this is a browser file?\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  },\r\n  getReport: function (coverage) {\r\n    let coverageMap = Coverage.createCoverageMap(coverage);\r\n    coverageMap = SourceMap.lib.transformCoverage(coverageMap).map;\r\n    coverageMap = this.filterCoverageReport(coverageMap);\r\n    return coverageMap;\r\n  },\r\n  getFileReport: function (coverage, filePath) {\r\n    const coverageMap = this.getReport(coverage);\r\n    const node = Report.summarizers.flat(coverageMap);\r\n    const childs = node.getRoot().getChildren();\r\n    let child;\r\n    for (let i = 0; i < childs.length; i++) {\r\n      /* istanbul ignore else */\r\n      if (childs[i].getRelativeName() === filePath) {\r\n        child = childs[i];\r\n      }\r\n    }\r\n    return child;\r\n  },\r\n  getTreeReport: function (coverage) {\r\n    return this.getNodeReport(coverage).getRoot();\r\n  },\r\n  getLcovonlyReport: function (coverage) {\r\n    return this.getTreeReport(coverage).getChildren();\r\n  },\r\n  getNodeReport: function (coverage) {\r\n    const coverageMap = this.getReport(coverage);\r\n    return Report.summarizers.flat(coverageMap);\r\n  }\r\n};\r\n"]},"sourceType":"script","hash":"47afdaac6f9e0712cebb568479ab363830a62bcb"}
