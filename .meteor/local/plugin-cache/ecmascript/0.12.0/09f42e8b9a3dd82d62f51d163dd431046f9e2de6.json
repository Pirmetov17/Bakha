{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/admin/simple-todos/packages/lmieulet:meteor-coverage/server/context/conf.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/lmieulet:meteor-coverage/server/context/conf.js","filename":"/Users/admin/simple-todos/packages/lmieulet:meteor-coverage/server/context/conf.js","passPerPreset":false,"envName":"development","cwd":"/Users/admin/simple-todos","root":"/Users/admin/simple-todos","presets":[],"generatorOpts":{"filename":"/Users/admin/simple-todos/packages/lmieulet:meteor-coverage/server/context/conf.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/lmieulet:meteor-coverage/server/context/conf.js"}},"code":"module.export({\n  IS_COVERAGE_ACTIVE: () => IS_COVERAGE_ACTIVE,\n  IS_COVERAGE_VERBOSE: () => IS_COVERAGE_VERBOSE,\n  COVERAGE_APP_FOLDER: () => COVERAGE_APP_FOLDER,\n  COVERAGE_EXPORT_FOLDER: () => COVERAGE_EXPORT_FOLDER,\n  exclude: () => exclude,\n  include: () => include,\n  remapFormat: () => remapFormat,\n  reportTypes: () => reportTypes\n});\nlet Log;\nmodule.link(\"./log\", {\n  default(v) {\n    Log = v;\n  }\n\n}, 0);\nconst meteor_parameters = {\n  // /:\\ ES 6\n  // return the value OR UNDEFINED\n  // THIS IS NOT A BOOLEAN\n  IS_COVERAGE_ACTIVE: Meteor && Meteor.settings && Meteor.settings.coverage && Meteor.settings.coverage.is_coverage_active,\n  COVERAGE_APP_FOLDER: Meteor && Meteor.settings && Meteor.settings.coverage && Meteor.settings.coverage.coverage_app_folder\n};\nconst IS_COVERAGE_ACTIVE = meteor_parameters.IS_COVERAGE_ACTIVE || process.env['COVERAGE'] === '1';\nconst IS_COVERAGE_VERBOSE = Log.COVERAGE_VERBOSE;\nconst ENV_NOT_DEFINED = '/SET/ENV/COVERAGE_APP_FOLDER/OR/READ/README/';\nconst COVERAGE_APP_FOLDER = meteor_parameters.COVERAGE_APP_FOLDER || process.env['COVERAGE_APP_FOLDER'] || ENV_NOT_DEFINED;\n\n/* istanbul ignore else */\nif (COVERAGE_APP_FOLDER === ENV_NOT_DEFINED) {\n  Log.info('Error: COVERAGE_APP_FOLDER is undefined and the coverage will fail.');\n}\n\nconst NOT_DEFINED = '/COVERAGE/NOT/ACTIVE/';\nlet configuration = {\n  exclude: {\n    general: [],\n    server: [],\n    client: []\n  },\n  include: [],\n  output: NOT_DEFINED\n};\n/* istanbul ignore else */\n\nif (IS_COVERAGE_ACTIVE) {\n  const fs = Npm.require('fs'),\n        path = Npm.require('path');\n\n  Log.info('Coverage active');\n  let coverageFile = path.join(COVERAGE_APP_FOLDER, '.coverage.json'),\n      defaultConfig = JSON.parse(Assets.getText('conf/default-coverage.json'));\n\n  try {\n    fs.accessSync(coverageFile);\n    Log.info('Reading custom configuration');\n    const configurationString = fs.readFileSync(coverageFile);\n    configuration = JSON.parse(configurationString);\n    Log.info('[Configuration] ', configuration);\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      let errMsg = `Error: ${coverageFile} is not a valid JSON`;\n      console.error(errMsg, e);\n      Log.error(e.stack);\n    } // Set up defaultConfig value if they are not provided in the .coverage.json file\n\n\n    Log.info('Loading default configuration, missing configuration file ', coverageFile);\n    configuration = defaultConfig;\n  } // Don't force to rewrite all the key of configuration.exclude,\n  // if they are not defined, the default conf is used.\n\n  /* istanbul ignore else */\n\n\n  if (configuration.exclude === undefined) {\n    Log.info('Loading default configuration: exclude.*');\n    configuration.exclude = defaultConfig.exclude;\n  }\n  /* istanbul ignore else */\n\n\n  if (configuration.exclude.general === undefined) {\n    Log.info('Loading default configuration: exclude.general');\n    configuration.exclude.general = defaultConfig.exclude.general;\n  }\n  /* istanbul ignore else */\n\n\n  if (configuration.exclude.server === undefined) {\n    Log.info('Loading default configuration: exclude.server');\n    configuration.exclude.server = defaultConfig.exclude.server;\n  }\n  /* istanbul ignore else */\n\n\n  if (configuration.exclude.client === undefined) {\n    Log.info('Loading default configuration: exclude.client');\n    configuration.exclude.client = defaultConfig.exclude.client;\n  }\n  /* istanbul ignore else */\n\n\n  if (configuration.include === undefined) {\n    Log.info('Loading default configuration: include');\n    configuration.include = defaultConfig.include || [];\n  }\n  /* istanbul ignore else */\n\n\n  if (configuration.output === undefined) {\n    Log.info('Loading default configuration: output');\n    configuration.output = defaultConfig.output;\n  }\n  /* istanbul ignore else */\n\n\n  if (configuration.remapFormat === undefined) {\n    Log.info('Loading default configuration: remapFormat');\n    configuration.remapFormat = defaultConfig.remapFormat;\n  }\n}\n\nconst COVERAGE_EXPORT_FOLDER = configuration.output;\nconst exclude = configuration.exclude;\nconst include = configuration.include;\nconst remapFormat = configuration.remapFormat;\nconst reportTypes = {\n  allowed: ['clover', 'cobertura', 'coverage', 'html', 'json', 'json-summary', 'lcov', 'lcovonly', 'remap', 'teamcity', 'text', 'text-lcov', 'text-summary'],\n  pending: ['clover', 'cobertura', 'lcov', 'teamcity', 'text', 'text-lcov']\n};\nLog.info('Coverage configuration:');\nLog.info('- IS_COVERAGE_ACTIVE=', IS_COVERAGE_ACTIVE);\nLog.info('- IS_COVERAGE_VERBOSE=', IS_COVERAGE_VERBOSE);\nLog.info('- COVERAGE_APP_FOLDER=', COVERAGE_APP_FOLDER);\nLog.info('.coverage.json values:');\nLog.info('- exclude=', configuration.exclude);\nLog.info('- include=', configuration.include);\nLog.info('- remapFormat=', configuration.remapFormat);\nLog.info('- COVERAGE_EXPORT_FOLDER=', COVERAGE_EXPORT_FOLDER);","map":{"version":3,"sources":["packages/lmieulet:meteor-coverage/server/context/conf.js"],"names":["module","export","IS_COVERAGE_ACTIVE","IS_COVERAGE_VERBOSE","COVERAGE_APP_FOLDER","COVERAGE_EXPORT_FOLDER","exclude","include","remapFormat","reportTypes","Log","link","default","v","meteor_parameters","Meteor","settings","coverage","is_coverage_active","coverage_app_folder","process","env","COVERAGE_VERBOSE","ENV_NOT_DEFINED","info","NOT_DEFINED","configuration","general","server","client","output","fs","Npm","require","path","coverageFile","join","defaultConfig","JSON","parse","Assets","getText","accessSync","configurationString","readFileSync","e","SyntaxError","errMsg","console","error","stack","undefined","allowed","pending"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,kBAAkB,EAAC,MAAIA,kBAAxB;AAA2CC,EAAAA,mBAAmB,EAAC,MAAIA,mBAAnE;AAAuFC,EAAAA,mBAAmB,EAAC,MAAIA,mBAA/G;AAAmIC,EAAAA,sBAAsB,EAAC,MAAIA,sBAA9J;AAAqLC,EAAAA,OAAO,EAAC,MAAIA,OAAjM;AAAyMC,EAAAA,OAAO,EAAC,MAAIA,OAArN;AAA6NC,EAAAA,WAAW,EAAC,MAAIA,WAA7O;AAAyPC,EAAAA,WAAW,EAAC,MAAIA;AAAzQ,CAAd;AAAqS,IAAIC,GAAJ;AAAQV,MAAM,CAACW,IAAP,CAAY,OAAZ,EAAoB;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACH,IAAAA,GAAG,GAACG,CAAJ;AAAM;;AAAlB,CAApB,EAAwC,CAAxC;AAC7S,MAAMC,iBAAiB,GAAG;AACxB;AACA;AACA;AACAZ,EAAAA,kBAAkB,EAAEa,MAAM,IAAIA,MAAM,CAACC,QAAjB,IAA6BD,MAAM,CAACC,QAAP,CAAgBC,QAA7C,IAAyDF,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,kBAJ9E;AAKxBd,EAAAA,mBAAmB,EAAEW,MAAM,IAAIA,MAAM,CAACC,QAAjB,IAA6BD,MAAM,CAACC,QAAP,CAAgBC,QAA7C,IAAyDF,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBE;AAL/E,CAA1B;AAQO,MAAMjB,kBAAkB,GAAGY,iBAAiB,CAACZ,kBAAlB,IAAyCkB,OAAO,CAACC,GAAR,CAAY,UAAZ,MAA4B,GAAhG;AACA,MAAMlB,mBAAmB,GAAGO,GAAG,CAACY,gBAAhC;AACP,MAAMC,eAAe,GAAG,8CAAxB;AAEO,MAAMnB,mBAAmB,GAAGU,iBAAiB,CAACV,mBAAlB,IAAyCgB,OAAO,CAACC,GAAR,CAAY,qBAAZ,CAAzC,IAA+EE,eAA3G;;AAEP;AACA,IAAInB,mBAAmB,KAAKmB,eAA5B,EAA6C;AAC3Cb,EAAAA,GAAG,CAACc,IAAJ,CAAS,qEAAT;AACD;;AACD,MAAMC,WAAW,GAAG,uBAApB;AACA,IAAIC,aAAa,GAAG;AAClBpB,EAAAA,OAAO,EAAE;AACPqB,IAAAA,OAAO,EAAE,EADF;AAEPC,IAAAA,MAAM,EAAE,EAFD;AAGPC,IAAAA,MAAM,EAAE;AAHD,GADS;AAMlBtB,EAAAA,OAAO,EAAE,EANS;AAOlBuB,EAAAA,MAAM,EAAEL;AAPU,CAApB;AASA;;AACA,IAAIvB,kBAAJ,EAAwB;AACtB,QAAM6B,EAAE,GAAGC,GAAG,CAACC,OAAJ,CAAY,IAAZ,CAAX;AAAA,QACEC,IAAI,GAAGF,GAAG,CAACC,OAAJ,CAAY,MAAZ,CADT;;AAGAvB,EAAAA,GAAG,CAACc,IAAJ,CAAS,iBAAT;AACA,MAAIW,YAAY,GAAGD,IAAI,CAACE,IAAL,CAAUhC,mBAAV,EAA+B,gBAA/B,CAAnB;AAAA,MACEiC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,OAAP,CAAe,4BAAf,CAAX,CADlB;;AAGA,MAAI;AACFV,IAAAA,EAAE,CAACW,UAAH,CAAcP,YAAd;AACAzB,IAAAA,GAAG,CAACc,IAAJ,CAAS,8BAAT;AACA,UAAMmB,mBAAmB,GAAGZ,EAAE,CAACa,YAAH,CAAgBT,YAAhB,CAA5B;AACAT,IAAAA,aAAa,GAAGY,IAAI,CAACC,KAAL,CAAWI,mBAAX,CAAhB;AACAjC,IAAAA,GAAG,CAACc,IAAJ,CAAS,kBAAT,EAA6BE,aAA7B;AACD,GAND,CAME,OAAOmB,CAAP,EAAU;AACV,QAAIA,CAAC,YAAYC,WAAjB,EAA8B;AAC5B,UAAIC,MAAM,GAAI,UAASZ,YAAa,sBAApC;AACAa,MAAAA,OAAO,CAACC,KAAR,CAAcF,MAAd,EAAsBF,CAAtB;AACAnC,MAAAA,GAAG,CAACuC,KAAJ,CAAUJ,CAAC,CAACK,KAAZ;AACD,KALS,CAMV;;;AACAxC,IAAAA,GAAG,CAACc,IAAJ,CAAS,4DAAT,EAAuEW,YAAvE;AACAT,IAAAA,aAAa,GAAGW,aAAhB;AACD,GAvBqB,CAyBtB;AACA;;AAEA;;;AACA,MAAIX,aAAa,CAACpB,OAAd,KAA0B6C,SAA9B,EAAyC;AACvCzC,IAAAA,GAAG,CAACc,IAAJ,CAAS,0CAAT;AACAE,IAAAA,aAAa,CAACpB,OAAd,GAAwB+B,aAAa,CAAC/B,OAAtC;AACD;AAED;;;AACA,MAAIoB,aAAa,CAACpB,OAAd,CAAsBqB,OAAtB,KAAkCwB,SAAtC,EAAiD;AAC/CzC,IAAAA,GAAG,CAACc,IAAJ,CAAS,gDAAT;AACAE,IAAAA,aAAa,CAACpB,OAAd,CAAsBqB,OAAtB,GAAgCU,aAAa,CAAC/B,OAAd,CAAsBqB,OAAtD;AACD;AAED;;;AACA,MAAID,aAAa,CAACpB,OAAd,CAAsBsB,MAAtB,KAAiCuB,SAArC,EAAgD;AAC9CzC,IAAAA,GAAG,CAACc,IAAJ,CAAS,+CAAT;AACAE,IAAAA,aAAa,CAACpB,OAAd,CAAsBsB,MAAtB,GAA+BS,aAAa,CAAC/B,OAAd,CAAsBsB,MAArD;AACD;AAED;;;AACA,MAAIF,aAAa,CAACpB,OAAd,CAAsBuB,MAAtB,KAAiCsB,SAArC,EAAgD;AAC9CzC,IAAAA,GAAG,CAACc,IAAJ,CAAS,+CAAT;AACAE,IAAAA,aAAa,CAACpB,OAAd,CAAsBuB,MAAtB,GAA+BQ,aAAa,CAAC/B,OAAd,CAAsBuB,MAArD;AACD;AAED;;;AACA,MAAIH,aAAa,CAACnB,OAAd,KAA0B4C,SAA9B,EAAyC;AACvCzC,IAAAA,GAAG,CAACc,IAAJ,CAAS,wCAAT;AACAE,IAAAA,aAAa,CAACnB,OAAd,GAAwB8B,aAAa,CAAC9B,OAAd,IAAyB,EAAjD;AACD;AAED;;;AACA,MAAImB,aAAa,CAACI,MAAd,KAAyBqB,SAA7B,EAAwC;AACtCzC,IAAAA,GAAG,CAACc,IAAJ,CAAS,uCAAT;AACAE,IAAAA,aAAa,CAACI,MAAd,GAAuBO,aAAa,CAACP,MAArC;AACD;AAED;;;AACA,MAAIJ,aAAa,CAAClB,WAAd,KAA8B2C,SAAlC,EAA6C;AAC3CzC,IAAAA,GAAG,CAACc,IAAJ,CAAS,4CAAT;AACAE,IAAAA,aAAa,CAAClB,WAAd,GAA4B6B,aAAa,CAAC7B,WAA1C;AACD;AACF;;AAEM,MAAMH,sBAAsB,GAAGqB,aAAa,CAACI,MAA7C;AACA,MAAMxB,OAAO,GAAGoB,aAAa,CAACpB,OAA9B;AACA,MAAMC,OAAO,GAAGmB,aAAa,CAACnB,OAA9B;AACA,MAAMC,WAAW,GAAGkB,aAAa,CAAClB,WAAlC;AACA,MAAMC,WAAW,GAAG;AACzB2C,EAAAA,OAAO,EAAE,CAAC,QAAD,EAAW,WAAX,EAAwB,UAAxB,EAAoC,MAApC,EAA4C,MAA5C,EAAoD,cAApD,EAAoE,MAApE,EAA4E,UAA5E,EAAwF,OAAxF,EAAiG,UAAjG,EAA6G,MAA7G,EAAqH,WAArH,EAAkI,cAAlI,CADgB;AAEzBC,EAAAA,OAAO,EAAE,CAAC,QAAD,EAAW,WAAX,EAAwB,MAAxB,EAAgC,UAAhC,EAA4C,MAA5C,EAAoD,WAApD;AAFgB,CAApB;AAKP3C,GAAG,CAACc,IAAJ,CAAS,yBAAT;AACAd,GAAG,CAACc,IAAJ,CAAS,uBAAT,EAAkCtB,kBAAlC;AACAQ,GAAG,CAACc,IAAJ,CAAS,wBAAT,EAAmCrB,mBAAnC;AACAO,GAAG,CAACc,IAAJ,CAAS,wBAAT,EAAmCpB,mBAAnC;AACAM,GAAG,CAACc,IAAJ,CAAS,wBAAT;AACAd,GAAG,CAACc,IAAJ,CAAS,YAAT,EAAuBE,aAAa,CAACpB,OAArC;AACAI,GAAG,CAACc,IAAJ,CAAS,YAAT,EAAuBE,aAAa,CAACnB,OAArC;AACAG,GAAG,CAACc,IAAJ,CAAS,gBAAT,EAA2BE,aAAa,CAAClB,WAAzC;AACAE,GAAG,CAACc,IAAJ,CAAS,2BAAT,EAAsCnB,sBAAtC","sourcesContent":["import Log from './log';\r\nconst meteor_parameters = {\r\n  // /:\\ ES 6\r\n  // return the value OR UNDEFINED\r\n  // THIS IS NOT A BOOLEAN\r\n  IS_COVERAGE_ACTIVE: Meteor && Meteor.settings && Meteor.settings.coverage && Meteor.settings.coverage.is_coverage_active,\r\n  COVERAGE_APP_FOLDER: Meteor && Meteor.settings && Meteor.settings.coverage && Meteor.settings.coverage.coverage_app_folder\r\n};\r\n\r\nexport const IS_COVERAGE_ACTIVE = meteor_parameters.IS_COVERAGE_ACTIVE ||  process.env['COVERAGE'] === '1';\r\nexport const IS_COVERAGE_VERBOSE = Log.COVERAGE_VERBOSE;\r\nconst ENV_NOT_DEFINED = '/SET/ENV/COVERAGE_APP_FOLDER/OR/READ/README/';\r\n\r\nexport const COVERAGE_APP_FOLDER = meteor_parameters.COVERAGE_APP_FOLDER || process.env['COVERAGE_APP_FOLDER'] || ENV_NOT_DEFINED;\r\n\r\n/* istanbul ignore else */\r\nif (COVERAGE_APP_FOLDER === ENV_NOT_DEFINED) {\r\n  Log.info('Error: COVERAGE_APP_FOLDER is undefined and the coverage will fail.');\r\n}\r\nconst NOT_DEFINED = '/COVERAGE/NOT/ACTIVE/';\r\nlet configuration = {\r\n  exclude: {\r\n    general: [],\r\n    server: [],\r\n    client: []\r\n  },\r\n  include: [],\r\n  output: NOT_DEFINED\r\n};\r\n/* istanbul ignore else */\r\nif (IS_COVERAGE_ACTIVE) {\r\n  const fs = Npm.require('fs'),\r\n    path = Npm.require('path');\r\n\r\n  Log.info('Coverage active');\r\n  let coverageFile = path.join(COVERAGE_APP_FOLDER, '.coverage.json'),\r\n    defaultConfig = JSON.parse(Assets.getText('conf/default-coverage.json'));\r\n\r\n  try {\r\n    fs.accessSync(coverageFile);\r\n    Log.info('Reading custom configuration');\r\n    const configurationString = fs.readFileSync(coverageFile);\r\n    configuration = JSON.parse(configurationString);\r\n    Log.info('[Configuration] ', configuration);\r\n  } catch (e) {\r\n    if (e instanceof SyntaxError) {\r\n      let errMsg = `Error: ${coverageFile} is not a valid JSON`;\r\n      console.error(errMsg, e);\r\n      Log.error(e.stack);\r\n    }\r\n    // Set up defaultConfig value if they are not provided in the .coverage.json file\r\n    Log.info('Loading default configuration, missing configuration file ', coverageFile);\r\n    configuration = defaultConfig;\r\n  }\r\n\r\n  // Don't force to rewrite all the key of configuration.exclude,\r\n  // if they are not defined, the default conf is used.\r\n\r\n  /* istanbul ignore else */\r\n  if (configuration.exclude === undefined) {\r\n    Log.info('Loading default configuration: exclude.*');\r\n    configuration.exclude = defaultConfig.exclude;\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (configuration.exclude.general === undefined) {\r\n    Log.info('Loading default configuration: exclude.general');\r\n    configuration.exclude.general = defaultConfig.exclude.general;\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (configuration.exclude.server === undefined) {\r\n    Log.info('Loading default configuration: exclude.server');\r\n    configuration.exclude.server = defaultConfig.exclude.server;\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (configuration.exclude.client === undefined) {\r\n    Log.info('Loading default configuration: exclude.client');\r\n    configuration.exclude.client = defaultConfig.exclude.client;\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (configuration.include === undefined) {\r\n    Log.info('Loading default configuration: include');\r\n    configuration.include = defaultConfig.include || [];\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (configuration.output === undefined) {\r\n    Log.info('Loading default configuration: output');\r\n    configuration.output = defaultConfig.output;\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (configuration.remapFormat === undefined) {\r\n    Log.info('Loading default configuration: remapFormat');\r\n    configuration.remapFormat = defaultConfig.remapFormat;\r\n  }\r\n}\r\n\r\nexport const COVERAGE_EXPORT_FOLDER = configuration.output;\r\nexport const exclude = configuration.exclude;\r\nexport const include = configuration.include;\r\nexport const remapFormat = configuration.remapFormat;\r\nexport const reportTypes = {\r\n  allowed: ['clover', 'cobertura', 'coverage', 'html', 'json', 'json-summary', 'lcov', 'lcovonly', 'remap', 'teamcity', 'text', 'text-lcov', 'text-summary'],\r\n  pending: ['clover', 'cobertura', 'lcov', 'teamcity', 'text', 'text-lcov']\r\n};\r\n\r\nLog.info('Coverage configuration:');\r\nLog.info('- IS_COVERAGE_ACTIVE=', IS_COVERAGE_ACTIVE);\r\nLog.info('- IS_COVERAGE_VERBOSE=', IS_COVERAGE_VERBOSE);\r\nLog.info('- COVERAGE_APP_FOLDER=', COVERAGE_APP_FOLDER);\r\nLog.info('.coverage.json values:');\r\nLog.info('- exclude=', configuration.exclude);\r\nLog.info('- include=', configuration.include);\r\nLog.info('- remapFormat=', configuration.remapFormat);\r\nLog.info('- COVERAGE_EXPORT_FOLDER=', COVERAGE_EXPORT_FOLDER);\r\n"]},"sourceType":"script","hash":"09f42e8b9a3dd82d62f51d163dd431046f9e2de6"}
