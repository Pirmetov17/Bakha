[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Picker = Package['meteorhacks:picker'].Picker;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Boot, showCoverage, getAsset, addClientCoverage, exportFile, type, importCoverage, instrumentClientJs, Handlers, Log, ReportCommon, options, setCoverageObject, Core, CoverageData, hookLoader, instrumentJs, fileMatch, shouldIgnore, shallInstrumentClientScript, shallInstrumentServerScript, Instrumenter, isAccessible, parseJSON, initialSetup, alterSourceMapPaths, fixSourcePath, registerSourceMap, SourceMap;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"lmieulet:meteor-coverage\":{\"server\":{\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lmieulet_meteor-coverage/server/index.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Conf;\nmodule.link(\"./context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 0);\nlet library; // If the coverage is active, it will import the probe inside this package\n// Every script imported using vm.runInThisContext will be hooked by istanbul\n// to provide on the fly the instrumented version of each script - in order to generate coverage stats\n// You need an external actor like spacejam to run different types of actions automaticaly :\n//   - merge several types of coverage\n//   - export reports\n\nif (Conf.IS_COVERAGE_ACTIVE) {\n  const Lib = require('./main'); // Provide the real library\n\n\n  library = Lib.default;\n} else {\n  // Mock the library\n  library = {\n    Conf,\n    Router: {},\n    SourceMap: {\n      registerSourceMap: function () {\n        throw 'COVERAGE_NOT_ACTIVE';\n      }\n    },\n    CoverageData: {},\n    Instrumenter: {\n      hookLoader: function () {}\n    },\n    ReportService: {}\n  };\n}\n\nmodule.exportDefault(library);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"boot.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lmieulet_meteor-coverage/server/boot.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 0);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 1);\nlet mkdirp;\nmodule.link(\"mkdirp\", {\n  default(v) {\n    mkdirp = v;\n  }\n\n}, 2);\nlet Conf;\nmodule.link(\"./context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 3);\nlet Router;\nmodule.link(\"./router\", {\n  default(v) {\n    Router = v;\n  }\n\n}, 4);\nlet Instrumenter;\nmodule.link(\"./services/instrumenter\", {\n  default(v) {\n    Instrumenter = v;\n  }\n\n}, 5);\nlet SourceMap;\nmodule.link(\"./services/source-map\", {\n  default(v) {\n    SourceMap = v;\n  }\n\n}, 6);\nmodule.exportDefault(Boot = {\n  startup() {\n    // Create reports output folder if not exists\n    let outputFolder = path.join(Conf.COVERAGE_APP_FOLDER, Conf.COVERAGE_EXPORT_FOLDER);\n    fs.access(outputFolder, fs.F_OK | fs.R_OK | fs.W_OK, err => {\n      /* istanbul ignore else */\n      if (err) {\n        try {\n          mkdirp(outputFolder);\n        } catch (e) {\n          console.error(`meteor-coverage failed to create the folder ${outputFolder} while booting:`, e);\n          Log.error(e.stack);\n        }\n      }\n    }); // Search for PUTs and check whether called from inside/outside a PUT dir\n\n    SourceMap.initialSetup(); // Start to collect coverage\n\n    Instrumenter.hookLoader(); // Connect the router to this app\n\n    new Router();\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"handlers.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lmieulet_meteor-coverage/server/handlers.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Conf;\nmodule.link(\"./context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 0);\nlet Instrumenter;\nmodule.link(\"./services/instrumenter\", {\n  default(v) {\n    Instrumenter = v;\n  }\n\n}, 1);\nlet Core;\nmodule.link(\"./services/core\", {\n  default(v) {\n    Core = v;\n  }\n\n}, 2);\nlet ReportService;\nmodule.link(\"./report/report-service\", {\n  default(v) {\n    ReportService = v;\n  }\n\n}, 3);\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 4);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 5);\n\nshowCoverage = function (params, req, res, next) {\n  let options = {\n    'filepath': params.query.p\n  };\n  let reportService = new ReportService();\n  reportService.generateReport(res, 'http', options);\n};\n\ngetAsset = function (params, req, res, next) {\n  var assetsDir = path.join(path.resolve('.'), 'assets/packages/lmieulet_meteor-coverage/assets/'),\n      filename = params.filename;\n  fs.exists(path.join(assetsDir, filename), function (exists) {\n    if (!exists) {\n      fs.exists(path.join(assetsDir, '/vendor/', filename), function (exists) {\n        /* istanbul ignore else */\n        if (!exists) return next();\n        fs.readFile(assetsDir + '/vendor/' + filename, function (err, fileContent) {\n          /* istanbul ignore else */\n          if (err) throw err;\n          res.end(fileContent);\n        });\n      });\n    } else {\n      fs.readFile(assetsDir + '/' + filename, function (err, fileContent) {\n        /* istanbul ignore else */\n        if (err) throw err;\n        res.end(fileContent);\n      });\n    }\n  });\n};\n\naddClientCoverage = function (params, req, res, next) {\n  var body = req.body;\n  /* istanbul ignore else */\n\n  if (!body) {\n    res.writeHead(400);\n    res.end();\n  }\n\n  var clientCoverage;\n\n  for (var property in body) {\n    /* istanbul ignore else */\n    if (body.hasOwnProperty(property)) {\n      clientCoverage = body[property];\n    }\n  }\n\n  if (clientCoverage) {\n    Core.mergeCoverageWith(clientCoverage);\n    res.end('{\"type\":\"success\"}');\n  } else {\n    res.writeHead(400);\n    res.end('Nothing has been imported');\n  }\n};\n\nexportFile = function (params, req, res, next) {\n  var _type = params.type;\n  /* istanbul ignore next: ternary operator */\n\n  type = Conf.reportTypes.allowed.indexOf(_type) > -1 ? _type : 'coverage';\n\n  try {\n    let reportService = new ReportService();\n    reportService.generateReport(res, type, {});\n  } catch (e) {\n    Log.error('Failed to export', e, e.stack);\n    res.writeHead(400);\n    res.end('Nothing has been export');\n  }\n};\n\nimportCoverage = function (params, req, res, next) {\n  try {\n    Core.importCoverage(res);\n  } catch (e) {\n    Log.error('Failed to import', e, e.stack);\n    res.writeHead(400);\n    res.end('No file has been import');\n  }\n};\n\ninstrumentClientJs = function (params, req, res, next) {\n  var fileurl = req.url.split('?')[0];\n\n  if (Instrumenter.shallInstrumentClientScript(fileurl)) {\n    var path, pathLabel; // Either a package\n\n    if (req.url.indexOf('/packages') === 0) {\n      path = '../web.browser';\n      pathLabel = path + fileurl;\n    } else if (req.url.indexOf('/app') === 0) {\n      // Or the app/app.js\n      path = '../web.browser';\n      pathLabel = path + fileurl;\n    } else {\n      // Or a public file\n      path = '../web.browser/app';\n      pathLabel = path + fileurl;\n    }\n\n    res.setHeader('Content-type', 'application/javascript');\n    fs.exists(path + fileurl, function (exists) {\n      /* istanbul ignore else */\n      if (!exists) return next();\n      fs.readFile(path + fileurl, 'utf8', function (err, fileContent) {\n        /* istanbul ignore else */\n        if (err) return next();\n        Instrumenter.instrumentJs(fileContent, pathLabel, function (err, data) {\n          /* istanbul ignore else */\n          if (err) throw err;\n          res.end(data);\n        });\n      });\n    });\n  } else {\n    next();\n  }\n};\n\nmodule.exportDefault(Handlers = {\n  showCoverage,\n  getAsset,\n  addClientCoverage,\n  instrumentClientJs,\n  exportFile,\n  importCoverage\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lmieulet_meteor-coverage/server/main.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Instrumenter;\nmodule.link(\"./services/instrumenter\", {\n  default(v) {\n    Instrumenter = v;\n  }\n\n}, 0);\nlet CoverageData;\nmodule.link(\"./services/coverage-data\", {\n  default(v) {\n    CoverageData = v;\n  }\n\n}, 1);\nlet SourceMap;\nmodule.link(\"./services/source-map\", {\n  default(v) {\n    SourceMap = v;\n  }\n\n}, 2);\nlet Conf;\nmodule.link(\"./context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 3);\nlet Router;\nmodule.link(\"./router\", {\n  default(v) {\n    Router = v;\n  }\n\n}, 4);\nlet ReportService;\nmodule.link(\"./report/report-service\", {\n  default(v) {\n    ReportService = v;\n  }\n\n}, 5);\nlet Boot;\nmodule.link(\"./boot.js\", {\n  default(v) {\n    Boot = v;\n  }\n\n}, 6);\nBoot.startup();\nmodule.exportDefault({\n  Conf,\n  Router,\n  SourceMap,\n  CoverageData,\n  Instrumenter,\n  ReportService\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"router.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lmieulet_meteor-coverage/server/router.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Handlers;\nmodule.link(\"./handlers\", {\n  default(v) {\n    Handlers = v;\n  }\n\n}, 0);\nlet Conf;\nmodule.link(\"./context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 1);\nlet bodyParser;\nmodule.link(\"body-parser\", {\n  default(v) {\n    bodyParser = v;\n  }\n\n}, 2);\nmodule.exportDefault(class {\n  constructor() {\n    if (Conf.IS_COVERAGE_ACTIVE) {\n      this.bindRoutes();\n    }\n  }\n\n  bindRoutes() {\n    Picker.middleware(bodyParser.urlencoded({\n      extended: false\n    }));\n    Picker.middleware(bodyParser.json({\n      limit: '30mb'\n    }));\n    var getRoute = Picker.filter(function (req, res) {\n      return req.method === 'GET';\n    }),\n        postRoute = Picker.filter(function (req, res) {\n      return req.method === 'POST';\n    });\n    getRoute.route('/coverage', Handlers.showCoverage);\n    getRoute.route('/coverage/show', Handlers.showCoverage); // Show static assets\n\n    getRoute.route('/coverage/asset/:filename', Handlers.getAsset);\n    getRoute.route('/coverage/export/:type?', Handlers.exportFile);\n    getRoute.route('/coverage/import', Handlers.importCoverage);\n    getRoute.route('/:arg1?/:arg2?/:arg3?/:arg4?', Handlers.instrumentClientJs); //merge client coverage posted from browser\n\n    postRoute.route('/coverage/client', Handlers.addClientCoverage);\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"context\":{\"conf.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lmieulet_meteor-coverage/server/context/conf.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  IS_COVERAGE_ACTIVE: () => IS_COVERAGE_ACTIVE,\n  IS_COVERAGE_VERBOSE: () => IS_COVERAGE_VERBOSE,\n  COVERAGE_APP_FOLDER: () => COVERAGE_APP_FOLDER,\n  COVERAGE_EXPORT_FOLDER: () => COVERAGE_EXPORT_FOLDER,\n  exclude: () => exclude,\n  include: () => include,\n  remapFormat: () => remapFormat,\n  reportTypes: () => reportTypes\n});\nlet Log;\nmodule.link(\"./log\", {\n  default(v) {\n    Log = v;\n  }\n\n}, 0);\nconst meteor_parameters = {\n  // /:\\ ES 6\n  // return the value OR UNDEFINED\n  // THIS IS NOT A BOOLEAN\n  IS_COVERAGE_ACTIVE: Meteor && Meteor.settings && Meteor.settings.coverage && Meteor.settings.coverage.is_coverage_active,\n  COVERAGE_APP_FOLDER: Meteor && Meteor.settings && Meteor.settings.coverage && Meteor.settings.coverage.coverage_app_folder\n};\nconst IS_COVERAGE_ACTIVE = meteor_parameters.IS_COVERAGE_ACTIVE || process.env['COVERAGE'] === '1';\nconst IS_COVERAGE_VERBOSE = Log.COVERAGE_VERBOSE;\nconst ENV_NOT_DEFINED = '/SET/ENV/COVERAGE_APP_FOLDER/OR/READ/README/';\nconst COVERAGE_APP_FOLDER = meteor_parameters.COVERAGE_APP_FOLDER || process.env['COVERAGE_APP_FOLDER'] || ENV_NOT_DEFINED;\n\n/* istanbul ignore else */\nif (COVERAGE_APP_FOLDER === ENV_NOT_DEFINED) {\n  Log.info('Error: COVERAGE_APP_FOLDER is undefined and the coverage will fail.');\n}\n\nconst NOT_DEFINED = '/COVERAGE/NOT/ACTIVE/';\nlet configuration = {\n  exclude: {\n    general: [],\n    server: [],\n    client: []\n  },\n  include: [],\n  output: NOT_DEFINED\n};\n/* istanbul ignore else */\n\nif (IS_COVERAGE_ACTIVE) {\n  const fs = Npm.require('fs'),\n        path = Npm.require('path');\n\n  Log.info('Coverage active');\n  let coverageFile = path.join(COVERAGE_APP_FOLDER, '.coverage.json'),\n      defaultConfig = JSON.parse(Assets.getText('conf/default-coverage.json'));\n\n  try {\n    fs.accessSync(coverageFile);\n    Log.info('Reading custom configuration');\n    const configurationString = fs.readFileSync(coverageFile);\n    configuration = JSON.parse(configurationString);\n    Log.info('[Configuration] ', configuration);\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      let errMsg = `Error: ${coverageFile} is not a valid JSON`;\n      console.error(errMsg, e);\n      Log.error(e.stack);\n    } // Set up defaultConfig value if they are not provided in the .coverage.json file\n\n\n    Log.info('Loading default configuration, missing configuration file ', coverageFile);\n    configuration = defaultConfig;\n  } // Don't force to rewrite all the key of configuration.exclude,\n  // if they are not defined, the default conf is used.\n\n  /* istanbul ignore else */\n\n\n  if (configuration.exclude === undefined) {\n    Log.info('Loading default configuration: exclude.*');\n    configuration.exclude = defaultConfig.exclude;\n  }\n  /* istanbul ignore else */\n\n\n  if (configuration.exclude.general === undefined) {\n    Log.info('Loading default configuration: exclude.general');\n    configuration.exclude.general = defaultConfig.exclude.general;\n  }\n  /* istanbul ignore else */\n\n\n  if (configuration.exclude.server === undefined) {\n    Log.info('Loading default configuration: exclude.server');\n    configuration.exclude.server = defaultConfig.exclude.server;\n  }\n  /* istanbul ignore else */\n\n\n  if (configuration.exclude.client === undefined) {\n    Log.info('Loading default configuration: exclude.client');\n    configuration.exclude.client = defaultConfig.exclude.client;\n  }\n  /* istanbul ignore else */\n\n\n  if (configuration.include === undefined) {\n    Log.info('Loading default configuration: include');\n    configuration.include = defaultConfig.include || [];\n  }\n  /* istanbul ignore else */\n\n\n  if (configuration.output === undefined) {\n    Log.info('Loading default configuration: output');\n    configuration.output = defaultConfig.output;\n  }\n  /* istanbul ignore else */\n\n\n  if (configuration.remapFormat === undefined) {\n    Log.info('Loading default configuration: remapFormat');\n    configuration.remapFormat = defaultConfig.remapFormat;\n  }\n}\n\nconst COVERAGE_EXPORT_FOLDER = configuration.output;\nconst exclude = configuration.exclude;\nconst include = configuration.include;\nconst remapFormat = configuration.remapFormat;\nconst reportTypes = {\n  allowed: ['clover', 'cobertura', 'coverage', 'html', 'json', 'json-summary', 'lcov', 'lcovonly', 'remap', 'teamcity', 'text', 'text-lcov', 'text-summary'],\n  pending: ['clover', 'cobertura', 'lcov', 'teamcity', 'text', 'text-lcov']\n};\nLog.info('Coverage configuration:');\nLog.info('- IS_COVERAGE_ACTIVE=', IS_COVERAGE_ACTIVE);\nLog.info('- IS_COVERAGE_VERBOSE=', IS_COVERAGE_VERBOSE);\nLog.info('- COVERAGE_APP_FOLDER=', COVERAGE_APP_FOLDER);\nLog.info('.coverage.json values:');\nLog.info('- exclude=', configuration.exclude);\nLog.info('- include=', configuration.include);\nLog.info('- remapFormat=', configuration.remapFormat);\nLog.info('- COVERAGE_EXPORT_FOLDER=', COVERAGE_EXPORT_FOLDER);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"log.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lmieulet_meteor-coverage/server/context/log.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nconst meteor_parameters = {\n  // /:\\ ES 6\n  // return the value OR UNDEFINED\n  // THIS IS NOT A BOOLEAN\n  VERBOSE: Meteor && Meteor.settings && Meteor.settings.coverage && Meteor.settings.coverage.verbose\n};\nmodule.exportDefault(Log = {\n  COVERAGE_VERBOSE: meteor_parameters.VERBOSE || process.env['COVERAGE_VERBOSE'] === '1' || false,\n  error: function () {\n    console.error(...arguments);\n  },\n  info: function () {\n    /* istanbul ignore else */\n    if (this.COVERAGE_VERBOSE) {\n      console.log(...arguments);\n    }\n  },\n  time: function () {\n    /* istanbul ignore else */\n    if (this.COVERAGE_VERBOSE) {\n      console.log(...arguments);\n    }\n  },\n  timeEnd: function () {\n    /* istanbul ignore else */\n    if (this.COVERAGE_VERBOSE) {\n      console.log(...arguments);\n    }\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"report\":{\"report-common.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lmieulet_meteor-coverage/server/report/report-common.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 0);\nlet mkdirp;\nmodule.link(\"mkdirp\", {\n  default(v) {\n    mkdirp = v;\n  }\n\n}, 1);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 2);\nlet Log;\nmodule.link(\"./../context/log\", {\n  default(v) {\n    Log = v;\n  }\n\n}, 3);\n\nconst istanbulAPI = Npm.require('istanbul-api'),\n      Report = istanbulAPI.libReport;\n\nmodule.exportDefault(ReportCommon = {\n  /**\r\n   * Alter fs to add a new method writer\r\n   * Used by the istanbul-reports library\r\n   * @param filepath\r\n   * @returns {*|Context}\r\n   */\n  getContext(filepath) {\n    let context = Report.createContext();\n    const dirpath = path.dirname(filepath);\n    this.checkDirectory(dirpath);\n    this.checkFile(filepath);\n    Object.defineProperty(context, 'writer', {\n      value: {\n        writeFile: function (path) {\n          return {\n            write: function (data) {\n              fs.appendFileSync(path, data);\n            },\n            println: function (data) {\n              fs.appendFileSync(path, data + '\\r\\n');\n            },\n            close: function () {},\n            colorize: function (string) {\n              return string;\n            }\n          };\n        }\n      }\n    });\n    return context;\n  },\n\n  checkDirectory(dirpath) {\n    let succeed = true; // Create folder\n\n    try {\n      const stat = fs.statSync(dirpath);\n    } catch (e) {\n      succeed = false;\n      Log.info('Creating a new folder', dirpath);\n\n      try {\n        mkdirp.sync(dirpath);\n      } catch (e) {\n        console.error('Something went wrong while creating folder', e, e.stack);\n      }\n    }\n\n    return succeed;\n  },\n\n  checkFile(filepath) {\n    let succeed = true; // Reset file\n\n    try {\n      Log.info('Try to remove the content & create the file', filepath);\n      fs.writeFileSync(filepath, '');\n    } catch (e) {\n      succeed = false;\n      console.error('Something went wrong while creating the file', filepath, e, e.stack);\n    }\n\n    return succeed;\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"report-coverage.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lmieulet_meteor-coverage/server/report/report-coverage.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 0);\nmodule.exportDefault(class {\n  constructor(res, options) {\n    this.res = res;\n    this.options = options;\n    this.options.filename = this.options.path;\n  }\n\n  generate() {\n    let coverage = Core.getCoverageObject();\n    var coverageReport = JSON.stringify(coverage),\n        reportPath = this.options.path;\n    let instance = this;\n    fs.writeFile(reportPath, coverageReport, function (err) {\n      /* istanbul ignore else */\n      if (err) {\n        throw 'failed to write report file: ' + reportPath;\n      }\n\n      instance.res.end('{\"type\":\"success\"}');\n    });\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"report-generic.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lmieulet_meteor-coverage/server/report/report-generic.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet CoverageData;\nmodule.link(\"./../services/coverage-data\", {\n  default(v) {\n    CoverageData = v;\n  }\n\n}, 0);\nlet Core;\nmodule.link(\"./../services/core\", {\n  default(v) {\n    Core = v;\n  }\n\n}, 1);\nlet ReportCommon;\nmodule.link(\"./report-common\", {\n  default(v) {\n    ReportCommon = v;\n  }\n\n}, 2);\nlet Conf;\nmodule.link(\"../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 3);\n\nconst istanbulAPI = Npm.require('istanbul-api'),\n      ReportImpl = istanbulAPI.reportsImpl;\n/**\r\n * Used by type lcovonly and json\r\n * create the corresponding file using istanbul api\r\n * @type {any}\r\n */\n\n\nmodule.exportDefault(class {\n  constructor(res, type, options) {\n    this.res = res;\n    this.options = options;\n    this.report = ReportImpl.create(type, this.options);\n    this.report.file = this.options.path;\n    this.context = ReportCommon.getContext(this.report.file);\n  }\n\n  generate() {\n    const coverage = Core.getCoverageObject();\n    let childs = CoverageData.getLcovonlyReport(coverage);\n    this.report.onStart(null, this.context);\n    /* istanbul ignore else */\n\n    if (childs.length === 0) {\n      this.res.setHeader('Content-type', 'text/plain');\n      this.res.statusCode = 500;\n      return this.res.end('{\"type\":\"No coverage to export\"}');\n    }\n\n    this.writeFile(childs);\n    this.res.end('{\"type\":\"success\"}');\n  }\n\n  writeFile(childs) {\n    for (let i = 0; i < childs.length; i++) {\n      // Remove the COVERAGE_APP_FOLDER from the filepath\n      childs[i].fileCoverage.data.path = childs[i].fileCoverage.data.path.replace(Conf.COVERAGE_APP_FOLDER, '');\n      this.report.onDetail(childs[i]);\n    }\n\n    this.report.onEnd();\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"report-html.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lmieulet_meteor-coverage/server/report/report-html.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet CoverageData;\nmodule.link(\"../services/coverage-data\", {\n  default(v) {\n    CoverageData = v;\n  }\n\n}, 0);\nlet Core;\nmodule.link(\"../services/core\", {\n  default(v) {\n    Core = v;\n  }\n\n}, 1);\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 2);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 3);\nlet ReportCommon;\nmodule.link(\"./report-common\", {\n  default(v) {\n    ReportCommon = v;\n  }\n\n}, 4);\nlet Log;\nmodule.link(\"./../context/log\", {\n  default(v) {\n    Log = v;\n  }\n\n}, 5);\n\nvar istanbulAPI = Npm.require('istanbul-api'),\n    Report = istanbulAPI.libReport,\n    ReportImpl = istanbulAPI.reportsImpl;\n\nmodule.exportDefault(class {\n  constructor(res, options) {\n    this.res = res;\n    this.options = options;\n    this.prefix = options.prefix;\n    this.options.subdir = this.options.path;\n    this.opts = this.generateOpts();\n    this.report = ReportImpl.create('html', this.opts);\n  }\n\n  generateOpts() {\n    const outputPath = this.options.path;\n    return {\n      verbose: this.options.verbose,\n      linkMapper: {\n        getPath: function (node) {\n          /* istanbul ignore else */\n          if (typeof node === 'string') {\n            return node;\n          }\n\n          var filePath = node.getQualifiedName();\n\n          if (node.isSummary()) {\n            filePath = path.join(outputPath, 'index.html');\n          } else {\n            filePath = path.join(outputPath, filePath + '.html');\n          }\n\n          return filePath;\n        },\n        relativePath: function (source, target) {\n          return this.getPath(target);\n        },\n        assetPath: function (node, name) {\n          return path.join(outputPath, name);\n        }\n      }\n    };\n  }\n\n  generate() {\n    const folderPath = this.options.path;\n    this.copyStatic();\n    var coverage = Core.getCoverageObject();\n    /* istanbul ignore else */\n\n    if (!(coverage && Object.keys(coverage).length > 0)) {\n      this.res.statusCode = 500;\n      return this.res.end('{\"type\":\"failed\", \"message\": \"No coverage information have been collected\"}');\n    }\n\n    var root = CoverageData.getTreeReport(coverage);\n    let filepath = path.join(folderPath, 'index.html');\n    this.report.onSummary(root, ReportCommon.getContext(filepath));\n    const childrens = root.getChildren();\n    const report = this.report; // Todo : use future\n\n    childrens.forEach(function (child) {\n      var filepath = path.join(folderPath, child.getRelativeName() + '.html');\n      Log.info('Creating a new html report', filepath);\n      let fileReport = CoverageData.getFileReport(coverage, child.getRelativeName());\n      report.onDetail(fileReport, ReportCommon.getContext(filepath));\n    });\n    this.res.end('{\"type\":\"success\"}');\n  }\n\n  copyStatic() {\n    ReportCommon.checkDirectory(this.options.path);\n    this.report.onStart(null, this.getFolderContext(this.options.path));\n  }\n\n  getFolderContext(folderpath) {\n    var context = Report.createContext();\n    Object.defineProperty(context, 'writer', {\n      value: {\n        copyFile: function (sourcePath, destPath) {\n          fs.readFile(sourcePath, (err, data) => {\n            /* istanbul ignore else */\n            if (err) throw err;\n            let p = path.join(folderpath, destPath);\n            fs.writeFile(p, data, (err, data) => {\n              /* istanbul ignore else */\n              if (err) throw err;\n            });\n          });\n        }\n      }\n    });\n    return context;\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"report-http.js\":function(require,exports,module,__filename,__dirname){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lmieulet_meteor-coverage/server/report/report-http.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet CoverageData;\nmodule.link(\"../services/coverage-data\", {\n  default(v) {\n    CoverageData = v;\n  }\n\n}, 0);\nlet Conf;\nmodule.link(\"../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 1);\nlet Core;\nmodule.link(\"../services/core\", {\n  default(v) {\n    Core = v;\n  }\n\n}, 2);\n\n// If we change Npm.require('istanbul-api') into import a from 'istanbul-api'\n// the __dirname change and the  istanbul dependency fails\n// See istanbul-reports\n// With Npm.require : /Users/Leo/Webstorm/meteor-container/packages/meteor-coverage/.npm/package/node_modules/istanbul-reports/lib/json\nvar istanbulAPI = Npm.require('istanbul-api'),\n    Report = istanbulAPI.libReport,\n    ReportImpl = istanbulAPI.reportsImpl;\n\nmodule.exportDefault(class {\n  constructor(res, options) {\n    this.res = res;\n    this.filepath = '';\n    this.options = options;\n    this.options.prefix = '/coverage/';\n    this.opts = this.createOpts();\n  }\n\n  createOpts() {\n    const prefix = this.options.prefix;\n    return {\n      verbose: Conf.IS_COVERAGE_VERBOSE,\n      linkMapper: {\n        getPath: function (node) {\n          /* istanbul ignore else */\n          if (typeof node === 'string') {\n            return node;\n          }\n\n          return node.getQualifiedName();\n        },\n        relativePath: function (source, target) {\n          return prefix + 'show?p=' + this.getPath(target);\n        },\n        assetPath: function (node, name) {\n          return prefix + 'asset/' + name;\n        }\n      }\n    };\n  }\n\n  generate() {\n    var coverage = Core.getCoverageObject();\n    /* istanbul ignore else */\n\n    if (!(coverage && Object.keys(coverage).length > 0)) {\n      this.res.setHeader('Content-type', 'text/plain');\n      return this.res.end('No coverage information has been collected');\n    }\n\n    this.res.setHeader('Content-type', 'text/html');\n    this.alterFS(this.res);\n    var context = this.getContext(this.res);\n    var report = ReportImpl.create('html', this.opts);\n\n    if (this.options.filepath) {\n      var child = CoverageData.getFileReport(coverage, this.options.filepath);\n      report.onDetail(child, context);\n    } else {\n      var root = CoverageData.getTreeReport(coverage);\n      report.onSummary(root, context);\n    }\n  }\n\n  getContext(res) {\n    var context = Report.createContext();\n    Object.defineProperty(context, 'writer', {\n      value: {\n        writerForDir: {\n          writeFile: function () {\n            return res;\n          }\n        },\n        writeFile: function () {\n          return res;\n        }\n      }\n    });\n    return context;\n  } // Istanbul-api expect to save HTML report to the file system and not over network\n\n\n  alterFS(res) {\n    res.close = function () {\n      this.end();\n    };\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"report-json-summary.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lmieulet_meteor-coverage/server/report/report-json-summary.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Conf;\nmodule.link(\"./../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 0);\nlet CoverageData;\nmodule.link(\"./../services/coverage-data\", {\n  default(v) {\n    CoverageData = v;\n  }\n\n}, 1);\nlet Core;\nmodule.link(\"./../services/core\", {\n  default(v) {\n    Core = v;\n  }\n\n}, 2);\nlet ReportCommon;\nmodule.link(\"./report-common\", {\n  default(v) {\n    ReportCommon = v;\n  }\n\n}, 3);\n\nconst istanbulAPI = Npm.require('istanbul-api'),\n      ReportImpl = istanbulAPI.reportsImpl;\n\nmodule.exportDefault(class {\n  constructor(res, type, options) {\n    this.res = res;\n    this.options = options;\n    /* istanbul ignore next: ternary operator */\n\n    this.options.verbose = Conf.IS_COVERAGE_VERBOSE ? true : false;\n    this.report = ReportImpl.create(type, this.options);\n    this.report.file = this.options.path;\n    this.context = ReportCommon.getContext(this.report.file);\n  }\n\n  generate() {\n    const coverage = Core.getCoverageObject();\n    let childs = CoverageData.getLcovonlyReport(coverage);\n    this.report.onStart(null, this.context);\n    /* istanbul ignore else */\n\n    if (childs.length === 0) {\n      this.res.setHeader('Content-type', 'text/plain');\n      this.res.statusCode = 500;\n      return this.res.end('{\"type\":\"No coverage to export\"}');\n    }\n\n    this.writeFile(childs);\n    this.res.end('{\"type\":\"success\"}');\n  }\n\n  writeFile(childs) {\n    for (let i = 0; i < childs.length; i++) {\n      // Remove the COVERAGE_APP_FOLDER from the filepath\n      childs[i].fileCoverage.data.path = childs[i].fileCoverage.data.path.replace(Conf.COVERAGE_APP_FOLDER, '');\n      this.report.onDetail(childs[i]);\n    } ///Todo: not working\n    //this.report.onSummary(childs);\n\n\n    this.report.onEnd();\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"report-remap.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lmieulet_meteor-coverage/server/report/report-remap.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Conf;\nmodule.link(\"./../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 0);\nlet Log;\nmodule.link(\"./../context/log\", {\n  default(v) {\n    Log = v;\n  }\n\n}, 1);\nlet ReportCommon;\nmodule.link(\"./report-common\", {\n  default(v) {\n    ReportCommon = v;\n  }\n\n}, 2);\nlet IstanbulGenericReporter;\nmodule.link(\"./report-generic\", {\n  default(v) {\n    IstanbulGenericReporter = v;\n  }\n\n}, 3);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 4);\n\nconst remapIstanbul = Npm.require('remap-istanbul');\n\nconst MemoryStore = Npm.require('istanbul/lib/store/memory');\n\nmodule.exportDefault(class {\n  constructor(res, type, options) {\n    this.res = res; // Common options\n\n    this.options = options; // JSON report options\n\n    this.pathJSON = path.join(this.options.path, 'summary.json'); // remap-istanbul options\n\n    this.remapFolder = path.join(Conf.COVERAGE_EXPORT_FOLDER, '.remap');\n    this.remapPath = path.join(Conf.COVERAGE_APP_FOLDER, this.remapFolder);\n  }\n\n  generateJSONReport() {\n    const jsonOptions = Object.assign({}, this.options, {\n      path: this.pathJSON\n    });\n    let jsonReport = new IstanbulGenericReporter(this.res, 'json', jsonOptions);\n    jsonReport.generate();\n  }\n\n  getFilePath(filename) {\n    return path.join(this.remapFolder, filename);\n  }\n\n  generate() {\n    // We cannot rely on a previous coverage analysis JSON report,\n    // so we force its generation here before remapping\n    this.generateJSONReport();\n    const cwd = process.cwd();\n    process.chdir(Conf.COVERAGE_APP_FOLDER); // Create output directory if not exists\n\n    ReportCommon.checkDirectory(this.remapPath);\n    let reports = {},\n        allReports = {\n      'html': this.remapPath,\n      'clover': this.getFilePath('clover.xml'),\n      'cobertura': this.getFilePath('cobertura.xml'),\n      'teamcity': this.getFilePath('teamcity.log'),\n      'text-summary': this.getFilePath('summary.txt'),\n      'text': this.getFilePath('report.txt'),\n      'lcovonly': this.getFilePath('lcov.info'),\n      'json-summary': this.getFilePath('summary.json'),\n      'json': this.getFilePath('report.json')\n    };\n    Conf.remapFormat.forEach(type => reports[type] = allReports[type]);\n    this.remapWrapper(this.pathJSON, reports, this.options).await();\n    this.res.end('{\"type\":\"success\"}'); // Restore previous working directory\n\n    process.chdir(cwd);\n  }\n\n  remapWrapper(sources, reports, options) {\n    let sourceStore = new MemoryStore();\n    let collector = remapIstanbul.remap(remapIstanbul.loadCoverage(sources), {\n      sources: sourceStore,\n      warn: function () {}\n    });\n    /* istanbul ignore else */\n\n    if (!Object.keys(sourceStore.map).length) {\n      sourceStore = undefined;\n    }\n\n    let p = Object.keys(reports).map(reportType => {\n      let reportOptions = Object.assign({}, this.options, {\n        verbose: reportType === 'html' ? false : true\n      });\n      return remapIstanbul.writeReport(collector, reportType, reportOptions, reports[reportType], sourceStore);\n    });\n    return Promise.all(p);\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"report-service.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lmieulet_meteor-coverage/server/report/report-service.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Log;\nmodule.link(\"./../context/log\", {\n  default(v) {\n    Log = v;\n  }\n\n}, 0);\nlet Conf;\nmodule.link(\"./../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 1);\nlet IstanbulGenericReporter;\nmodule.link(\"./report-generic\", {\n  default(v) {\n    IstanbulGenericReporter = v;\n  }\n\n}, 2);\nlet JsonSummary;\nmodule.link(\"./report-json-summary\", {\n  default(v) {\n    JsonSummary = v;\n  }\n\n}, 3);\nlet Html;\nmodule.link(\"./report-html\", {\n  default(v) {\n    Html = v;\n  }\n\n}, 4);\nlet Http;\nmodule.link(\"./report-http\", {\n  default(v) {\n    Http = v;\n  }\n\n}, 5);\nlet ReportCoverage;\nmodule.link(\"./report-coverage\", {\n  default(v) {\n    ReportCoverage = v;\n  }\n\n}, 6);\nlet ReportRemap;\nmodule.link(\"./report-remap\", {\n  default(v) {\n    ReportRemap = v;\n  }\n\n}, 7);\nlet TextSummary;\nmodule.link(\"./report-text-summary\", {\n  default(v) {\n    TextSummary = v;\n  }\n\n}, 8);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 9);\nmodule.exportDefault(class {\n  generateReport(res, type, options) {\n    options = Object.assign({}, {\n      path: path.join(Conf.COVERAGE_APP_FOLDER, Conf.COVERAGE_EXPORT_FOLDER),\n\n      /* istanbul ignore next: ternary operator */\n      verbose: Log.COVERAGE_VERBOSE ? true : false\n    }, options);\n    Log.info('export coverage using the following format [', type, '] options [', options, ']');\n\n    try {\n      switch (type) {\n        case 'remap':\n          {\n            let reportRemap = new ReportRemap(res, type, options);\n            reportRemap.generate();\n            break;\n          }\n\n        case 'lcovonly':\n          {\n            options = this.addFileToOptions(options, 'lcov.info');\n            let istanbulFile1 = new IstanbulGenericReporter(res, type, options);\n            istanbulFile1.generate();\n            break;\n          }\n\n        case 'json':\n          {\n            options = this.addFileToOptions(options, 'summary.json');\n            let istanbulFile2 = new IstanbulGenericReporter(res, type, options);\n            istanbulFile2.generate();\n            break;\n          }\n\n        case 'coverage':\n          {\n            options = this.addFileToOptions(options, 'report.json');\n            let reportCoverage = new ReportCoverage(res, options);\n            reportCoverage.generate();\n            break;\n          }\n\n        /*case 'teamcity':\r\n          {\r\n            options = this.addFileToOptions(options, 'teamcity.log');\r\n            let teamcity = new Teamcity(res, options);\r\n            teamcity.generate();\r\n            break;\r\n          }*/\n\n        case 'json-summary':\n          {\n            options = this.addFileToOptions(options, 'json_summary.json');\n            let jsonSummary = new JsonSummary(res, type, options);\n            jsonSummary.generate();\n            break;\n          }\n\n        case 'html':\n          {\n            options = Object.assign({}, {\n              'prefix': '/coverage/'\n            }, options);\n            let html = new Html(res, options);\n            html.generate();\n            break;\n          }\n\n        case 'text-summary':\n          {\n            options = this.addFileToOptions(options, 'summary.txt');\n            let textSummary = new TextSummary(res, type, options);\n            textSummary.generate();\n            break;\n          }\n\n        case 'http':\n          {\n            let http = new Http(res, options);\n            http.generate();\n            break;\n          }\n\n        default:\n          {\n            Log.error('Failed to export - this type is not implemented yet');\n            res.writeHead(400);\n            res.end('{\"type\":\"This type [' + type + '] is not supported\"}');\n          }\n      }\n    } catch (e) {\n      Log.error('ReportService failed while creating report type [', type, ']');\n      console.error(e, e.stack);\n      res.writeHead(400);\n      res.end('{\"type\":\"error\",\"message\":\"Unexpected error\"}');\n    }\n  }\n\n  addFileToOptions(options, filename) {\n    return Object.assign({}, options, {\n      path: path.join(options.path, filename)\n    });\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"report-text-summary.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lmieulet_meteor-coverage/server/report/report-text-summary.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Conf;\nmodule.link(\"../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 0);\nlet CoverageData;\nmodule.link(\"../services/coverage-data\", {\n  default(v) {\n    CoverageData = v;\n  }\n\n}, 1);\nlet Core;\nmodule.link(\"../services/core\", {\n  default(v) {\n    Core = v;\n  }\n\n}, 2);\nlet ReportCommon;\nmodule.link(\"./report-common\", {\n  default(v) {\n    ReportCommon = v;\n  }\n\n}, 3);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 4);\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 5);\n\nvar istanbulAPI = Npm.require('istanbul-api'),\n    Report = istanbulAPI.libReport,\n    ReportImpl = istanbulAPI.reportsImpl;\n\nmodule.exportDefault(class {\n  constructor(res, type, options) {\n    this.res = res;\n    this.options = options;\n    this.report = ReportImpl.create(type, this.options);\n    this.report.file = this.options.path;\n    this.context = this.getContext(this.report.file);\n  }\n\n  generate() {\n    let coverage = Core.getCoverageObject();\n    var root = CoverageData.getTreeReport(coverage);\n    this.report.onStart(root, this.context);\n    this.res.end('{\"type\":\"success\"}');\n  }\n\n  getContext(filepath) {\n    const dirpath = path.dirname(filepath);\n    ReportCommon.checkDirectory(dirpath);\n    ReportCommon.checkFile(filepath);\n    var context = Report.createContext();\n    Object.defineProperty(context, 'writer', {\n      value: {\n        writeFile: function (path) {\n          return {\n            write: function (data) {\n              fs.appendFileSync(path, data);\n            },\n            println: function (data) {\n              fs.appendFileSync(path, data + '\\r\\n');\n            },\n            close: function () {},\n            colorize: function (string) {\n              return string;\n            }\n          };\n        }\n      }\n    });\n    return context;\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"services\":{\"core.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lmieulet_meteor-coverage/server/services/core.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Conf;\nmodule.link(\"./../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 0);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 1);\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 2);\n\nconst istanbulAPI = Npm.require('istanbul-api');\n\nconst Coverage = istanbulAPI.libCoverage;\nlet mergeCoverageWith, importCoverage, getCoverageObject;\n\ngetCoverageObject = function () {\n  /* istanbul ignore next: default assignment */\n  global.__coverage__ = global.__coverage__ || {};\n  return global.__coverage__;\n};\n\nsetCoverageObject = function (obj) {\n  global.__coverage__ = obj;\n};\n\nmergeCoverageWith = function (obj) {\n  /* istanbul ignore else */\n  if (!obj) {\n    return;\n  }\n\n  var coverage = getCoverageObject();\n  var coverageMap = Coverage.createCoverageMap(coverage);\n  coverageMap.addFileCoverage(obj);\n  setCoverageObject(coverageMap.toJSON());\n};\n/* istanbul ignore next: default assignment */\n\n\nimportCoverage = function (res, options = {}) {\n  Log.info('import coverage');\n  /* istanbul ignore next: ternary operator */\n\n  const filename = options.filename ? options.filename : 'report.json';\n  const reportPath = path.join(Conf.COVERAGE_APP_FOLDER, Conf.COVERAGE_EXPORT_FOLDER, filename);\n  fs.exists(reportPath, function (exists) {\n    /* istanbul ignore else */\n    if (!exists) {\n      throw 'report file not found: reportPath=' + reportPath + ' COVERAGE_APP_FOLDER=' + Conf.COVERAGE_APP_FOLDER;\n    }\n\n    fs.readFile(reportPath, 'utf8', function (err, fileContent) {\n      /* istanbul ignore else */\n      if (err) {\n        throw 'failed to read report file: ' + reportPath;\n      }\n\n      let coverageObj = JSON.parse(fileContent);\n\n      for (let property in coverageObj) {\n        /* istanbul ignore else */\n        if (coverageObj.hasOwnProperty(property)) {\n          Core.mergeCoverageWith(coverageObj[property]);\n        }\n      }\n\n      res.end('{\"type\":\"success\"}');\n    });\n  });\n};\n\nmodule.exportDefault(Core = {\n  mergeCoverageWith,\n  importCoverage,\n  getCoverageObject\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"coverage-data.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lmieulet_meteor-coverage/server/services/coverage-data.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Conf;\nmodule.link(\"./../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 0);\nlet Instrumenter;\nmodule.link(\"./instrumenter\", {\n  default(v) {\n    Instrumenter = v;\n  }\n\n}, 1);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 2);\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 3);\n\nconst istanbulAPI = Npm.require('istanbul-api');\n\nconst Report = istanbulAPI.libReport;\nconst Coverage = istanbulAPI.libCoverage;\nmodule.exportDefault(CoverageData = {\n  filterCoverageReport: function (report) {\n    /* istanbul ignore else */\n    if (!report.data) {\n      throw 'Invalid report';\n    }\n\n    let newData = {};\n\n    for (let property in report.data) {\n      /* istanbul ignore else */\n      if (report.data.hasOwnProperty(property)) {\n        if (this.isAccepted(property)) {\n          newData[property] = report.data[property];\n        } else {\n          Log.info('isRefused', property);\n        }\n      }\n    }\n\n    report.data = newData;\n    return report;\n  },\n  isAccepted: function (filename) {\n    // Check if the file was also inside a .map\n\n    /* istanbul ignore else */\n    if (filename.indexOf(Conf.COVERAGE_APP_FOLDER) < 0) {\n      return false;\n    }\n\n    let isAServerSideFile = filename.indexOf('client') === -1 && filename.indexOf('web.browser') === -1;\n    /* istanbul ignore else */\n\n    if (Instrumenter.shouldIgnore(filename, isAServerSideFile)) {\n      return false;\n    }\n    /* istanbul ignore else */\n\n\n    if (filename.indexOf('packages/') > 0) {\n      Log.time('read access ' + filename);\n      const isExist = fs.existsSync(filename);\n      Log.timeEnd('read access ' + filename);\n      /* istanbul ignore else */\n\n      if (isExist) {\n        // Internal package\n        return true;\n      }\n    }\n    /* istanbul ignore else */\n\n\n    if (filename.indexOf('client/') > 0 && filename.indexOf('template.') > 0) {\n      /* istanbul ignore else */\n      if (fs.existsSync(filename)) {\n        // some file\n        return true;\n      } // this is a html template transformed into js file\n\n\n      return false;\n    }\n    /* istanbul ignore else */\n\n\n    if (filename.indexOf('node_modules') > 0) {\n      // this is a browser file?\n      return false;\n    }\n\n    return true;\n  },\n  getReport: function (coverage) {\n    let coverageMap = Coverage.createCoverageMap(coverage);\n    coverageMap = SourceMap.lib.transformCoverage(coverageMap).map;\n    coverageMap = this.filterCoverageReport(coverageMap);\n    return coverageMap;\n  },\n  getFileReport: function (coverage, filePath) {\n    const coverageMap = this.getReport(coverage);\n    const node = Report.summarizers.flat(coverageMap);\n    const childs = node.getRoot().getChildren();\n    let child;\n\n    for (let i = 0; i < childs.length; i++) {\n      /* istanbul ignore else */\n      if (childs[i].getRelativeName() === filePath) {\n        child = childs[i];\n      }\n    }\n\n    return child;\n  },\n  getTreeReport: function (coverage) {\n    return this.getNodeReport(coverage).getRoot();\n  },\n  getLcovonlyReport: function (coverage) {\n    return this.getTreeReport(coverage).getChildren();\n  },\n  getNodeReport: function (coverage) {\n    const coverageMap = this.getReport(coverage);\n    return Report.summarizers.flat(coverageMap);\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"instrumenter.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lmieulet_meteor-coverage/server/services/instrumenter.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet _;\n\nmodule.link(\"meteor/underscore\", {\n  _(v) {\n    _ = v;\n  }\n\n}, 0);\nlet Log;\nmodule.link(\"./../context/log\", {\n  default(v) {\n    Log = v;\n  }\n\n}, 1);\nlet Conf;\nmodule.link(\"./../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 2);\nlet minimatch;\nmodule.link(\"minimatch\", {\n  default(v) {\n    minimatch = v;\n  }\n\n}, 3);\n\nconst istanbulAPI = Npm.require('istanbul-api');\n\nconst Instrument = istanbulAPI.libInstrument;\nconst Hook = istanbulAPI.libHook;\nlet instrumenter = undefined;\n/**\r\n * hooks `runInThisContext` to add instrumentation to matching files when they are loaded on the server\r\n * @method hookLoader\r\n * @param {Object} opts instrumenter options\r\n */\n\nhookLoader = function (opts) {\n  /* istanbul ignore next: default assignment */\n  opts = opts || {};\n  opts.verbose = true;\n  opts.coverageVariable = '__coverage__'; // force this always\n\n  /* istanbul ignore else */\n\n  if (instrumenter !== undefined) {\n    throw 'Instrumenter already defined ! You cannot call this method twice';\n  }\n\n  instrumenter = Instrument.createInstrumenter(opts);\n  const transformer = instrumenter.instrumentSync.bind(instrumenter);\n  Hook.hookRunInThisContext(shallInstrumentServerScript, transformer, {\n    verbose: opts.verbose\n  });\n};\n\ninstrumentJs = function (content, path, callback) {\n  SourceMap.registerSourceMap(path);\n  return instrumenter.instrument(content, path, callback);\n};\n\nfileMatch = function (filePath, pattern) {\n  return minimatch(filePath, pattern, {\n    dot: true\n  });\n};\n\nshouldIgnore = function (filePath, isAServerSideFile) {\n  // Force the inclusion of any file using config file\n\n  /* istanbul ignore else */\n  if (Conf.include) {\n    /* istanbul ignore else */\n    if (Conf.include.some(pattern => Instrumenter.fileMatch(filePath, pattern))) {\n      Log.info('[Accepted][include]: ', filePath);\n      return false;\n    }\n  }\n  /* istanbul ignore else */\n\n\n  if (Conf.exclude.general) {\n    /* istanbul ignore else */\n    if (Conf.exclude.general.some(pattern => Instrumenter.fileMatch(filePath, pattern))) {\n      Log.info('[Ignored][exclude.general]: ', filePath);\n      return true;\n    }\n  }\n  /* istanbul ignore else */\n\n\n  if (Conf.exclude.server && isAServerSideFile) {\n    /* istanbul ignore else */\n    if (Conf.exclude.server.some(pattern => Instrumenter.fileMatch(filePath, pattern))) {\n      Log.info('[Ignored][exclude.server]: ', filePath);\n      return true;\n    }\n  }\n  /* istanbul ignore else */\n\n\n  if (Conf.exclude.client && !isAServerSideFile) {\n    /* istanbul ignore else */\n    if (Conf.exclude.client.some(pattern => Instrumenter.fileMatch(filePath, pattern))) {\n      Log.info('[Ignored][exclude.client]: ', filePath);\n      return true;\n    }\n  }\n\n  Log.info('[Accepted][*]: ', filePath);\n  return false;\n};\n\nshallInstrumentClientScript = function (fileurl) {\n  /* istanbul ignore else */\n  if (fileurl.indexOf('.js') > -1) {\n    /* istanbul ignore else */\n    if (!Instrumenter.shouldIgnore(fileurl, false)) {\n      Log.info('[ClientSide][Public] file instrumented: ' + fileurl);\n      return true;\n    }\n\n    Log.info('[ClientSide][Public] file ignored: ' + fileurl);\n    return false;\n  }\n\n  return false;\n};\n/**\r\n *\r\n * a match function with signature `fn(file)` that returns true if `file` needs to be instrumented\r\n * if the result is true, it also reads the corresponding source map\r\n * @returns {Function}\r\n */\n\n\nshallInstrumentServerScript = function (file) {\n  var root = __meteor_bootstrap__.serverDir;\n  /* istanbul ignore else */\n\n  if (file.indexOf(root) !== 0) {\n    Log.info('[ServerSide][OutsideApp] file ignored: ' + file);\n    return false;\n  }\n\n  file = file.substring(root.length);\n  /* istanbul ignore else */\n\n  if (file.indexOf('node_modules') >= 0) {\n    Log.info('[ServerSide][node_modules] file ignored: ' + file);\n    return false;\n  }\n\n  if (file.indexOf('packages') === 1) {\n    /* istanbul ignore else */\n    if (!Instrumenter.shouldIgnore(file, true)) {\n      SourceMap.registerSourceMap(root + file);\n      return true;\n    }\n  } else {\n    /* istanbul ignore else */\n    if (!Instrumenter.shouldIgnore(root + file, true)) {\n      SourceMap.registerSourceMap(root + file);\n      return true;\n    }\n  }\n\n  return false;\n};\n\nmodule.exportDefault(Instrumenter = {\n  hookLoader,\n  instrumentJs,\n  shouldIgnore,\n  fileMatch,\n  shallInstrumentClientScript,\n  shallInstrumentServerScript\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"source-map.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lmieulet_meteor-coverage/server/services/source-map.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Log;\nmodule.link(\"./../context/log\", {\n  default(v) {\n    Log = v;\n  }\n\n}, 0);\nlet Conf;\nmodule.link(\"./../context/conf\", {\n  default(v) {\n    Conf = v;\n  }\n\n}, 1);\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 2);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 3);\n\nconst homedir = Npm.require('homedir');\n\nconst istanbulAPI = Npm.require('istanbul-api');\n\nconst libSourceMaps = istanbulAPI.libSourceMaps;\nconst sourceMap = libSourceMaps.createSourceMapStore({\n  verbose: Conf.IS_COVERAGE_ACTIVE\n});\nconst meteorDir = Conf.COVERAGE_APP_FOLDER;\nconst splitToken = String.fromCharCode(56507) + 'app/'; // caution! magic character inside the SourceMap source(s) path\n\nconst abspath = {\n  local: path.join(__meteor_bootstrap__.serverDir, '..', '..', '..'),\n  // could use process.env.METEOR_SHELL_DIR too\n  currentBuild: path.join(__meteor_bootstrap__.serverDir, '..'),\n  serverSide: __meteor_bootstrap__.serverDir,\n  clientSide: path.join(__meteor_bootstrap__.serverDir, '..', 'web.browser'),\n  // Meteor packages folder can be overriden with the env var PACKAGE_DIRS, otherwise '$HOME/.meteor/packages'.\n  // Read https://guide.meteor.com/writing-atmosphere-packages.html#overriding-atmosphere-packages\n  packages: process.env.PACKAGE_DIRS || path.join(homedir(), '.meteor', 'packages')\n};\nconst rgx = {\n  meteorCompiledTemplate: /\\/template\\.[^\\.\\/]+\\.js$/,\n  meteorPackageMergedFile: /^\\/packages\\/(local-test_)?(?:([^\\/_]+)_)?([^\\/_]+).js$/,\n  meteorPackagePathTokens: /^(?:packages\\/|node_modules\\/meteor\\/)(?:local-test[_:])?(([^_:\\/]+[_:])?([^_:\\/]+))\\/(.*node_modules\\/)?(.*)$/,\n  meteorPUT: /^local-test:((?:[^_:\\/]+:)?[^_:\\/]+)$/,\n  packageJson: /^(?:\\.\\.\\/npm\\/node_modules\\/(.*)|\\.\\.\\/\\.\\.\\/(?:(?!node_modules).)*(.*)|.*node_modules\\/(.*))$/\n};\n\nisAccessible = function (path, mode = fs.R_OK, supressErrors = false) {\n  try {\n    fs.accessSync(path, mode);\n    return true;\n  } catch (e) {\n    /* istanbul ignore else */\n    if (!supressErrors) {\n      Log.error('Cannot access', path);\n    }\n\n    return false;\n  }\n};\n\nparseJSON = function (filePath, supressAccessErrors = false) {\n  /* istanbul ignore else */\n  if (isAccessible(filePath, fs.R_OK, supressAccessErrors)) {\n    try {\n      return JSON.parse(fs.readFileSync(filePath, 'utf8'));\n    } catch (e) {\n      /* istanbul ignore next: Meteor should have saved an invalid JSON, quite improbable */\n      Log.error('Invalid JSON:', filePath, e);\n    }\n  }\n};\n\ninitialSetup = function () {\n  // Get the resolved, compiled and used packages and their versions\n  let resolverResultPath = path.join(abspath.local, 'resolver-result-cache.json');\n  let resolverResult = parseJSON(resolverResultPath);\n  /* istanbul ignore next: ternary operator */\n\n  this.resolved = resolverResult ? resolverResult.lastOutput.answer : null;\n  /* istanbul ignore else */\n\n  if (Meteor.isPackageTest) {\n    /* istanbul ignore else */\n    if (this.resolved) {\n      // Find the package(s) under test (PUT)\n      for (let pkg in this.resolved) {\n        /* istanbul ignore else */\n        if (this.resolved.hasOwnProperty(pkg)) {\n          let match = rgx.meteorPUT.exec(pkg);\n          match && (this.PUT[match[1]] = true);\n        }\n      }\n\n      const PUTs = Object.keys(this.PUT);\n      /* istanbul ignore else */\n\n      if (PUTs.length) {\n        Log.info(`Packages under test (${PUTs.length}):`, PUTs.join(', '));\n      } else {\n        Log.error('No packages under test in test-packages mode');\n      }\n    } // Check if testing from inside (pkg/) or outside (app/). We test all the merged files of meteor package(s) tests(s)\n    // assuming that `meteor test-packages` was exec from the package folder which the merged test file belongs to:\n    //  - If none can be accessed, then command is exec from app-dir\n    //  - If one can be accessed, then command is exec from pkg-dir of that package\n    // The possibilities when testing packages are:\n    //  1. `app/packages/pkg$ meteor test-packages ...opts`     inside (COVERAGE_APP_FOLDER points to app/packages/pkg/), test N packages\n    //  2. `app/packages/pkg$ meteor test-packages ./ ...opts`  inside (COVERAGE_APP_FOLDER points to app/packages/pkg/), test 1 package\n    //  3. `app$ meteor test-packages ...opts`                  outside (COVERAGE_APP_FOLDER points to app/), test N packages\n    //  4. `app$ meteor test-packages author:pkg...opts`        outside (COVERAGE_APP_FOLDER points to app/), test 1 package\n    //  5. `app$ meteor test-packages packages/pkg...opts`      outside (COVERAGE_APP_FOLDER points to app/), test 1 package\n    // NOTE: `...opts` represents the remaining command options (`--driver-package`, etc.)\n\n\n    const sidePaths = {\n      load: abspath.serverSide,\n      manifest: abspath.clientSide\n    };\n\n    for (let key in sidePaths) {\n      /* istanbul ignore else */\n      if (sidePaths.hasOwnProperty(key)) {\n        const programPath = path.join(sidePaths[key], 'program.json');\n        const program = parseJSON(programPath);\n        /* istanbul ignore next: file automatically created by Meteor, so really rare to enter here */\n\n        if (!program) continue;\n\n        for (let file of program[key]) {\n          let isTestFile,\n              matchAuthor,\n              matchName,\n              match = rgx.meteorPackageMergedFile.exec(`/${file.path}`); // If it's a meteor package test(s) merged file and the package has tests (the merged file is created whether\n          // the package has tests file(s) declared in `package.js` inside `Package.onTest()` or not). The way to know\n          // whether the package has tests or not is looking at file.sourceMap: if it's empty, it has no tests.\n\n          /* istanbul ignore else */\n\n          if (match && match[1] && file.sourceMap) {\n            [, isTestFile, matchAuthor, matchName] = match;\n            const sourceMapPath = path.join(sidePaths[key], file.sourceMap);\n            const sourceMap = parseJSON(sourceMapPath);\n            /* istanbul ignore else */\n\n            if (!sourceMap) continue; // jump to the next file if SourceMap non-accessible or invalid\n            // A compiled test file (local-test_...) has only the declared test\n            // files inside `package.js` as its sources, so check the first one\n\n            this.testingFromPackageDir = `${matchAuthor}:${matchName}`;\n            let filepathToCheck = fixSourcePath.call(this, sourceMap.sources[0], null, meteorDir);\n\n            if (!isAccessible(filepathToCheck, fs.R_OK, true)) {\n              this.testingFromPackageDir = false;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n      /* istanbul ignore else */\n\n\n      if (this.testingFromPackageDir) break;\n    }\n  }\n}; // Alter inside the source map the path of each sources\n\n\nalterSourceMapPaths = function (map, isClientSide) {\n  // Absolute path to sources of a Meteor package. PUTs are treated differently than normal because they\n  // might not exist at abspath.packages, so PUT packages always are resolved depending on\n  // COVERAGE_APP_FOLDER and whether `meteor test-packages` was executed from inside/outside the package\n  // folder. Sources base of any Meteor packages not under test is always resolved to abspath.packages\n  let sourcesBase, isTestFile, matchAuthor, matchName;\n  /* istanbul ignore else */\n\n  if (rgx.meteorPackageMergedFile.test(map.file)) {\n    [, isTestFile, matchAuthor, matchName] = rgx.meteorPackageMergedFile.exec(map.file);\n    /* istanbul ignore next: ternary operator */\n\n    const packageID = matchAuthor ? `${matchAuthor}:${matchName}` : matchName;\n\n    if (Meteor.isPackageTest && (!!isTestFile || this.PUT[packageID])) {\n      // If exec `meteor test-packages` from `meteor-app-dir/packages/pkg-dir/` then Meteor performs tests on ALL\n      // packages at `meteor-app-dir/packages`, just like exec `meteor test-packages` from `meteor-app-dir/`, but\n      // this affects `sourcesBase` for PUTs, because PUTs outside COVERAGE_APP_FOLDER must change their sourcesBase\n      if (this.testingFromPackageDir) {\n        sourcesBase = this.testingFromPackageDir === packageID ? meteorDir : path.join(meteorDir, '..', matchName);\n      } else {\n        sourcesBase = path.join(meteorDir, 'packages', matchName);\n      }\n    } else {\n      /* istanbul ignore else */\n      if (this.resolved[packageID]) {\n        /* istanbul ignore next: ternary operator */\n        const packageFolder = matchAuthor ? `${matchAuthor}_${matchName}` : matchName;\n        sourcesBase = path.join(abspath.packages, packageFolder, this.resolved[packageID], 'web.browser');\n      }\n    }\n  } // Get `node_modules` base path for this map.file\n\n\n  let nodeModulesBase,\n      program = parseJSON(path.join(abspath.serverSide, 'program.json'));\n  /* istanbul ignore else */\n\n  if (!isClientSide && program) {\n    // Find the item matching map.file path\n    const mergedPath = map.file.substr(1);\n\n    for (let file of program.load) {\n      /* istanbul ignore else */\n      if (file.path === mergedPath) {\n        /* istanbul ignore else */\n        if (file.node_modules) {\n          try {\n            nodeModulesBase = path.join(abspath.serverSide, file.node_modules);\n            nodeModulesBase = fs.realpathSync(nodeModulesBase); // usually a symlink\n          } catch (e) {\n            if (e.code === 'ENOENT') {\n              Log.info('File not found!', nodeModulesBase);\n            } else {\n              throw e;\n            }\n          }\n        }\n\n        break;\n      }\n    }\n  }\n  /* istanbul ignore else */\n\n\n  if (!nodeModulesBase && sourcesBase) {\n    // Try locating node_modules inside sourcesBase sibling `npm`\n    let sourcesSiblingFolder = path.join(sourcesBase, '..', 'npm', 'node_modules');\n    /* istanbul ignore else */\n\n    if (isAccessible(sourcesSiblingFolder, fs.R_OK, true)) {\n      nodeModulesBase = sourcesSiblingFolder;\n    }\n  } // Fix sources paths, but be aware that, although you might be tempted to remove items\n  // from map.{sources|contentSources} (like non-instrumentable files: *.css, *.json,...),\n  // you must NOT do it, because their indexes are still being used by the mappings and\n  // you'll get a sound `Error('No element indexed by {index}')`.\n\n\n  for (let i = 0; i < map.sources.length; i++) {\n    // Meteor templates are not saved into files, but included in sourcesContent\n\n    /* istanbul ignore else */\n    if (rgx.meteorCompiledTemplate.test(map.sources[i])) {\n      Log.info('Skipping Meteor template:', map.sources[i]);\n      continue;\n    }\n\n    let fixed = fixSourcePath.call(this, map.sources[i], nodeModulesBase, sourcesBase);\n\n    if (map.sources[i] === fixed) {\n      Log.error('Source could not be altered:', map.sources[i]);\n    } else if (isAccessible(fixed)) {\n      map.sources[i] = fixed;\n    } else {\n      Log.error('Altered source could not be accessed:', map.sources[i]);\n    }\n  }\n\n  return map;\n}; // Fixes path of a source (file) in the SourceMap of a concatenated Meteor package test file\n\n\nfixSourcePath = function (source, nodeModulesBase, sourcesBase) {\n  let match,\n      paths = source.split(splitToken).slice(1); // Skip sources with unknown syntax\n\n  /* istanbul ignore else */\n\n  if (!paths.length) {\n    Log.error('Source with unknown format:', source);\n    return source;\n  } // The source is the package.json of a NPM dependency. Catches all next patterns:\n  //  1. meteor://💻app/.npm/package/node_modules/minimatch/package.json\n  //    [1 may be @ nodeModulesBase (when non-PUT) or sourcesBase (when PUT)]\n  //  2. meteor://💻app/../npm/node_modules/meteor-babel-helpers/package.json (package NPM dep)\n  //  3. meteor://💻app/../../app-dir/node_modules/meteor-node-stubs/node_modules/string_decoder/package.json\u001b (app NPM dep)\n  //  4. meteor://💻app/node_modules/http-errors/node_modules/inherits/package.json\n  //  5. meteor://💻app/node_modules/content-type/package.json\n\n  /* istanbul ignore else */\n\n\n  if (paths[0].endsWith('/package.json')) {\n    match = rgx.packageJson.exec(paths[0]);\n    /* istanbul ignore else */\n\n    if (match) {\n      /* istanbul ignore else */\n      if (match[2]) {\n        // covers 3 (app NPM dep package.json)\n        return path.join(meteorDir, match[2]);\n      }\n      /* istanbul ignore else */\n\n\n      if (match[3] && nodeModulesBase) {\n        // covers 1 (when non-PUT), 4 and 5 (meteor pkg NPM dep package.json)\n        return path.join(nodeModulesBase, match[3]);\n      }\n\n      return path.join(sourcesBase, paths[0]); // covers 1 (when PUT) and 2\n    }\n  } // The source is a Meteor package file (NPM dep or own file). Catches all next patterns:\n  //  6. meteor://💻app/packages/lmieulet:meteor-coverage/server/index.js\n  //  7. meteor://💻app/packages/local-test:lmieulet:meteor-coverage/server/tests.js\n  //  8. meteor://💻app/node_modules/meteor/lmieulet:meteor-coverage/node_modules/minimatch/minimatch.js\n  //  9. meteor://💻app/node_modules/meteor/local-test:cgalvarez:my-package/tests/client/mocks.js\n  //  10. meteor://💻app/node_modules/meteor/local-test:cgalvarez:my-package/node_modules/chai-as-promised/lib/chai-as-promised.js\n  //  11. meteor://💻app/node_modules/meteor/local-test:kadira:flow-router/node_modules/page/node_modules/path-to-regexp/node_modules/isarray/index.js\n\n\n  let matchPackageID, matchAuthor, matchName, matchNpmDepPath, matchPath;\n  match = rgx.meteorPackagePathTokens.exec(paths[0]);\n  /* istanbul ignore else */\n\n  if (match) {\n    [, matchPackageID, matchAuthor, matchName, matchNpmDepPath, matchPath] = match;\n    /* istanbul ignore else */\n\n    if (this.PUT[matchPackageID]) {\n      // PUT\n\n      /* istanbul ignore else */\n      if (matchNpmDepPath) {\n        // There is no way to know a priori if it's a recursive dep or not\n        let recNpmDep = path.join(sourcesBase, '.npm', 'package', matchNpmDepPath, matchPath);\n        /* istanbul ignore else */\n\n        if (isAccessible(recNpmDep, fs.R_OK, true)) {\n          return recNpmDep; // check if recursive dep (11) of PUT\n        }\n\n        return path.join(sourcesBase, '.npm', 'package', 'node_modules', matchPath); // first level dep (10) of PUT\n      }\n\n      return path.join(sourcesBase, matchPath); // covers 6,7,8,9 when PUT\n    }\n    /* istanbul ignore else */\n\n\n    if (Meteor.isPackageTest) {\n      return path.join(matchNpmDepPath ? nodeModulesBase : sourcesBase, matchPath); // non PUT\n    } // Package inside app-dir/packages on `meteor test ...`\n\n\n    return path.join(meteorDir, 'packages', matchName, matchPath);\n  } // Meteor app file\n\n\n  return path.join(meteorDir, paths[0]);\n}; // Processes the source map (when exists) of an instrumented file to fix broken sources paths\n\n\nregisterSourceMap = function (filepath) {\n  const sourceMapPath = filepath + '.map';\n  let fileContent = parseJSON(sourceMapPath, true);\n\n  if (fileContent) {\n    Log.time('registerSourceMap', filepath);\n    fileContent = alterSourceMapPaths.call(this, fileContent, filepath.startsWith('../web.browser/') || filepath.startsWith(abspath.clientSide));\n    Log.info('Add source map for file', sourceMapPath);\n    sourceMap.registerMap(filepath, fileContent);\n    Log.timeEnd('registerSourceMap', filepath);\n  } else {\n    Log.info('Source map not found', sourceMapPath);\n  }\n};\n\nmodule.exportDefault(SourceMap = {\n  initialSetup,\n  lib: sourceMap,\n  PUT: {},\n  // Meteor package(s) under test\n  registerSourceMap,\n  resolved: undefined,\n  // Meteor packages in use and their version\n  testingFromPackageDir: undefined // Whether `meteor test-packages` is run from inside/outside the package dir\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"node_modules\":{\"minimatch\":{\"package.json\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/lmieulet_meteor-coverage/node_modules/minimatch/package.json                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {\n  \"name\": \"minimatch\",\n  \"version\": \"3.0.3\",\n  \"main\": \"minimatch.js\"\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"minimatch.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/lmieulet_meteor-coverage/node_modules/minimatch/minimatch.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"mkdirp\":{\"package.json\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/lmieulet_meteor-coverage/node_modules/mkdirp/package.json                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {\n  \"name\": \"mkdirp\",\n  \"version\": \"0.5.1\",\n  \"main\": \"index.js\"\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/lmieulet_meteor-coverage/node_modules/mkdirp/index.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"body-parser\":{\"package.json\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/lmieulet_meteor-coverage/node_modules/body-parser/package.json                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {\n  \"name\": \"body-parser\",\n  \"version\": \"1.15.2\"\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/lmieulet_meteor-coverage/node_modules/body-parser/index.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/lmieulet:meteor-coverage/server/index.js\");\n\n/* Exports */\nPackage._define(\"lmieulet:meteor-coverage\", exports);\n\n})();\n","servePath":"/packages/lmieulet_meteor-coverage.js","sourceMap":{"version":3,"sources":["packages/lmieulet:meteor-coverage/server/index.js","packages/lmieulet:meteor-coverage/server/boot.js","packages/lmieulet:meteor-coverage/server/handlers.js","packages/lmieulet:meteor-coverage/server/main.js","packages/lmieulet:meteor-coverage/server/router.js","packages/lmieulet:meteor-coverage/server/context/conf.js","packages/lmieulet:meteor-coverage/server/context/log.js","packages/lmieulet:meteor-coverage/server/report/report-common.js","packages/lmieulet:meteor-coverage/server/report/report-coverage.js","packages/lmieulet:meteor-coverage/server/report/report-generic.js","packages/lmieulet:meteor-coverage/server/report/report-html.js","packages/lmieulet:meteor-coverage/server/report/report-http.js","packages/lmieulet:meteor-coverage/server/report/report-json-summary.js","packages/lmieulet:meteor-coverage/server/report/report-remap.js","packages/lmieulet:meteor-coverage/server/report/report-service.js","packages/lmieulet:meteor-coverage/server/report/report-text-summary.js","packages/lmieulet:meteor-coverage/server/services/core.js","packages/lmieulet:meteor-coverage/server/services/coverage-data.js","packages/lmieulet:meteor-coverage/server/services/instrumenter.js","packages/lmieulet:meteor-coverage/server/services/source-map.js"],"names":["Conf","module","link","default","v","library","IS_COVERAGE_ACTIVE","Lib","require","Router","SourceMap","registerSourceMap","CoverageData","Instrumenter","hookLoader","ReportService","exportDefault","fs","path","mkdirp","Boot","startup","outputFolder","join","COVERAGE_APP_FOLDER","COVERAGE_EXPORT_FOLDER","access","F_OK","R_OK","W_OK","err","e","console","error","Log","stack","initialSetup","Core","showCoverage","params","req","res","next","options","query","p","reportService","generateReport","getAsset","assetsDir","resolve","filename","exists","readFile","fileContent","end","addClientCoverage","body","writeHead","clientCoverage","property","hasOwnProperty","mergeCoverageWith","exportFile","_type","type","reportTypes","allowed","indexOf","importCoverage","instrumentClientJs","fileurl","url","split","shallInstrumentClientScript","pathLabel","setHeader","instrumentJs","data","Handlers","bodyParser","constructor","bindRoutes","Picker","middleware","urlencoded","extended","json","limit","getRoute","filter","method","postRoute","route","export","IS_COVERAGE_VERBOSE","exclude","include","remapFormat","meteor_parameters","Meteor","settings","coverage","is_coverage_active","coverage_app_folder","process","env","COVERAGE_VERBOSE","ENV_NOT_DEFINED","info","NOT_DEFINED","configuration","general","server","client","output","Npm","coverageFile","defaultConfig","JSON","parse","Assets","getText","accessSync","configurationString","readFileSync","SyntaxError","errMsg","undefined","pending","VERBOSE","verbose","arguments","log","time","timeEnd","istanbulAPI","Report","libReport","ReportCommon","getContext","filepath","context","createContext","dirpath","dirname","checkDirectory","checkFile","Object","defineProperty","value","writeFile","write","appendFileSync","println","close","colorize","string","succeed","stat","statSync","sync","writeFileSync","generate","getCoverageObject","coverageReport","stringify","reportPath","instance","ReportImpl","reportsImpl","report","create","file","childs","getLcovonlyReport","onStart","length","statusCode","i","fileCoverage","replace","onDetail","onEnd","prefix","subdir","opts","generateOpts","outputPath","linkMapper","getPath","node","filePath","getQualifiedName","isSummary","relativePath","source","target","assetPath","name","folderPath","copyStatic","keys","root","getTreeReport","onSummary","childrens","getChildren","forEach","child","getRelativeName","fileReport","getFileReport","getFolderContext","folderpath","copyFile","sourcePath","destPath","createOpts","alterFS","writerForDir","IstanbulGenericReporter","remapIstanbul","MemoryStore","pathJSON","remapFolder","remapPath","generateJSONReport","jsonOptions","assign","jsonReport","getFilePath","cwd","chdir","reports","allReports","remapWrapper","await","sources","sourceStore","collector","remap","loadCoverage","warn","map","reportType","reportOptions","writeReport","Promise","all","JsonSummary","Html","Http","ReportCoverage","ReportRemap","TextSummary","reportRemap","addFileToOptions","istanbulFile1","istanbulFile2","reportCoverage","jsonSummary","html","textSummary","http","Coverage","libCoverage","global","__coverage__","setCoverageObject","obj","coverageMap","createCoverageMap","addFileCoverage","toJSON","coverageObj","filterCoverageReport","newData","isAccepted","isAServerSideFile","shouldIgnore","isExist","existsSync","getReport","lib","transformCoverage","summarizers","flat","getRoot","getNodeReport","_","minimatch","Instrument","libInstrument","Hook","libHook","instrumenter","coverageVariable","createInstrumenter","transformer","instrumentSync","bind","hookRunInThisContext","shallInstrumentServerScript","content","callback","instrument","fileMatch","pattern","dot","some","__meteor_bootstrap__","serverDir","substring","homedir","libSourceMaps","sourceMap","createSourceMapStore","meteorDir","splitToken","String","fromCharCode","abspath","local","currentBuild","serverSide","clientSide","packages","PACKAGE_DIRS","rgx","meteorCompiledTemplate","meteorPackageMergedFile","meteorPackagePathTokens","meteorPUT","packageJson","isAccessible","mode","supressErrors","parseJSON","supressAccessErrors","resolverResultPath","resolverResult","resolved","lastOutput","answer","isPackageTest","pkg","match","exec","PUT","PUTs","sidePaths","load","manifest","key","programPath","program","isTestFile","matchAuthor","matchName","sourceMapPath","testingFromPackageDir","filepathToCheck","fixSourcePath","call","alterSourceMapPaths","isClientSide","sourcesBase","test","packageID","packageFolder","nodeModulesBase","mergedPath","substr","node_modules","realpathSync","code","sourcesSiblingFolder","fixed","paths","slice","endsWith","matchPackageID","matchNpmDepPath","matchPath","recNpmDep","startsWith","registerMap"],"mappings":"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","file":"/packages/lmieulet_meteor-coverage.js","sourcesContent":["import Conf from './context/conf';\r\nlet library;\r\n\r\n// If the coverage is active, it will import the probe inside this package\r\n// Every script imported using vm.runInThisContext will be hooked by istanbul\r\n// to provide on the fly the instrumented version of each script - in order to generate coverage stats\r\n// You need an external actor like spacejam to run different types of actions automaticaly :\r\n//   - merge several types of coverage\r\n//   - export reports\r\nif (Conf.IS_COVERAGE_ACTIVE) {\r\n  const Lib = require('./main');\r\n  // Provide the real library\r\n  library = Lib.default;\r\n} else {\r\n  // Mock the library\r\n  library = {\r\n    Conf,\r\n    Router: {\r\n\r\n    },\r\n    SourceMap: {\r\n      registerSourceMap: function () {\r\n        throw 'COVERAGE_NOT_ACTIVE';\r\n      }\r\n    },\r\n    CoverageData: {\r\n\r\n    },\r\n    Instrumenter: {\r\n      hookLoader: function() {}\r\n    },\r\n    ReportService: {\r\n\r\n    }\r\n  };\r\n}\r\n\r\nexport default library;","import fs from 'fs';\r\nimport path from 'path';\r\nimport mkdirp from 'mkdirp';\r\nimport Conf from './context/conf';\r\nimport Router from './router';\r\nimport Instrumenter from './services/instrumenter';\r\nimport SourceMap from './services/source-map';\r\n\r\nexport default Boot = {\r\n  startup() {\r\n    // Create reports output folder if not exists\r\n    let outputFolder = path.join(Conf.COVERAGE_APP_FOLDER, Conf.COVERAGE_EXPORT_FOLDER);\r\n    fs.access(outputFolder, fs.F_OK | fs.R_OK | fs.W_OK, (err) => {\r\n      /* istanbul ignore else */\r\n      if (err) {\r\n        try {\r\n          mkdirp(outputFolder);\r\n        } catch (e) {\r\n          console.error (`meteor-coverage failed to create the folder ${outputFolder} while booting:`, e);\r\n          Log.error(e.stack);\r\n        }\r\n      }\r\n    });\r\n    // Search for PUTs and check whether called from inside/outside a PUT dir\r\n    SourceMap.initialSetup();\r\n    // Start to collect coverage\r\n    Instrumenter.hookLoader();\r\n    // Connect the router to this app\r\n    new Router();\r\n  }\r\n};\r\n","import Conf from './context/conf';\r\nimport Instrumenter from './services/instrumenter';\r\nimport Core from './services/core';\r\nimport ReportService from './report/report-service';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\nshowCoverage = function (params, req, res, next) {\r\n  let options = {\r\n    'filepath': params.query.p\r\n  };\r\n  let reportService = new ReportService();\r\n  reportService.generateReport(res, 'http', options);\r\n};\r\n\r\ngetAsset = function (params, req, res, next) {\r\n  var assetsDir = path.join(path.resolve('.'), 'assets/packages/lmieulet_meteor-coverage/assets/'),\r\n    filename = params.filename;\r\n  fs.exists(path.join(assetsDir, filename), function (exists) {\r\n    if (!exists) {\r\n      fs.exists(path.join(assetsDir, '/vendor/', filename), function (exists) {\r\n        /* istanbul ignore else */\r\n        if (!exists) return next();\r\n        fs.readFile(assetsDir + '/vendor/' + filename, function (err, fileContent) {\r\n          /* istanbul ignore else */\r\n          if (err) throw err;\r\n          res.end(fileContent);\r\n        });\r\n      });\r\n    } else {\r\n      fs.readFile(assetsDir + '/' + filename, function (err, fileContent) {\r\n        /* istanbul ignore else */\r\n        if (err) throw err;\r\n        res.end(fileContent);\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\naddClientCoverage = function (params, req, res, next) {\r\n  var body = req.body;\r\n  /* istanbul ignore else */\r\n  if (!body) {\r\n    res.writeHead(400);\r\n    res.end();\r\n  }\r\n\r\n  var clientCoverage;\r\n  for (var property in body) {\r\n    /* istanbul ignore else */\r\n    if (body.hasOwnProperty(property)) {\r\n      clientCoverage = body[property];\r\n    }\r\n  }\r\n  if (clientCoverage) {\r\n    Core.mergeCoverageWith(clientCoverage);\r\n    res.end('{\"type\":\"success\"}');\r\n  } else {\r\n    res.writeHead(400);\r\n    res.end('Nothing has been imported');\r\n  }\r\n};\r\n\r\nexportFile = function (params, req, res, next) {\r\n  var _type = params.type;\r\n  /* istanbul ignore next: ternary operator */\r\n  type = Conf.reportTypes.allowed.indexOf(_type) > -1 ? _type : 'coverage';\r\n  try {\r\n    let reportService = new ReportService();\r\n    reportService.generateReport(res, type, {});\r\n  } catch (e) {\r\n    Log.error('Failed to export', e, e.stack);\r\n    res.writeHead(400);\r\n    res.end('Nothing has been export');\r\n  }\r\n};\r\nimportCoverage = function (params, req, res, next) {\r\n  try {\r\n    Core.importCoverage(res);\r\n  } catch (e) {\r\n    Log.error('Failed to import', e, e.stack);\r\n    res.writeHead(400);\r\n    res.end('No file has been import');\r\n  }\r\n};\r\n\r\ninstrumentClientJs = function (params, req, res, next) {\r\n  var fileurl = req.url.split('?')[0];\r\n  if (Instrumenter.shallInstrumentClientScript(fileurl)) {\r\n    var path,\r\n      pathLabel;\r\n          // Either a package\r\n    if (req.url.indexOf('/packages') === 0) {\r\n      path = '../web.browser';\r\n      pathLabel = path + fileurl;\r\n    } else if (req.url.indexOf('/app') === 0) {\r\n              // Or the app/app.js\r\n      path = '../web.browser';\r\n      pathLabel = path + fileurl;\r\n    } else {\r\n              // Or a public file\r\n      path = '../web.browser/app';\r\n      pathLabel = path + fileurl;\r\n    }\r\n    res.setHeader('Content-type', 'application/javascript');\r\n    fs.exists(path + fileurl, function (exists) {\r\n      /* istanbul ignore else */\r\n      if (!exists) return next();\r\n      fs.readFile(path + fileurl, 'utf8', function (err, fileContent) {\r\n        /* istanbul ignore else */\r\n        if (err) return next();\r\n        Instrumenter.instrumentJs(fileContent, pathLabel, function (err, data) {\r\n          /* istanbul ignore else */\r\n          if (err) throw err;\r\n          res.end(data);\r\n        });\r\n      });\r\n    });\r\n  } else {\r\n    next();\r\n  }\r\n};\r\n\r\nexport default Handlers = {\r\n  showCoverage,\r\n  getAsset,\r\n  addClientCoverage,\r\n  instrumentClientJs,\r\n  exportFile,\r\n  importCoverage\r\n};\r\n","import Instrumenter from './services/instrumenter';\r\nimport CoverageData from './services/coverage-data';\r\nimport SourceMap from './services/source-map';\r\nimport Conf from './context/conf';\r\nimport Router from './router';\r\nimport ReportService from './report/report-service';\r\nimport Boot from './boot.js';\r\n\r\nBoot.startup();\r\n\r\nexport default {\r\n  Conf,\r\n  Router,\r\n  SourceMap,\r\n  CoverageData,\r\n  Instrumenter,\r\n  ReportService\r\n};\r\n","import Handlers from './handlers';\r\nimport Conf from './context/conf';\r\nimport bodyParser from 'body-parser';\r\nexport default class {\r\n  constructor() {\r\n    if (Conf.IS_COVERAGE_ACTIVE) {\r\n      this.bindRoutes();\r\n    }\r\n  }\r\n\r\n  bindRoutes() {\r\n    Picker.middleware(bodyParser.urlencoded({extended: false}));\r\n    Picker.middleware(bodyParser.json({limit: '30mb'}));\r\n\r\n    var getRoute = Picker.filter(function (req, res) {\r\n        return req.method === 'GET';\r\n      }),\r\n      postRoute = Picker.filter(function (req, res) {\r\n        return req.method === 'POST';\r\n      });\r\n\r\n    getRoute.route('/coverage', Handlers.showCoverage);\r\n\r\n    getRoute.route('/coverage/show', Handlers.showCoverage);\r\n\r\n        // Show static assets\r\n    getRoute.route('/coverage/asset/:filename', Handlers.getAsset);\r\n\r\n    getRoute.route('/coverage/export/:type?', Handlers.exportFile);\r\n\r\n    getRoute.route('/coverage/import', Handlers.importCoverage);\r\n\r\n    getRoute.route('/:arg1?/:arg2?/:arg3?/:arg4?', Handlers.instrumentClientJs);\r\n\r\n        //merge client coverage posted from browser\r\n    postRoute.route('/coverage/client', Handlers.addClientCoverage);\r\n  }\r\n}","import Log from './log';\r\nconst meteor_parameters = {\r\n  // /:\\ ES 6\r\n  // return the value OR UNDEFINED\r\n  // THIS IS NOT A BOOLEAN\r\n  IS_COVERAGE_ACTIVE: Meteor && Meteor.settings && Meteor.settings.coverage && Meteor.settings.coverage.is_coverage_active,\r\n  COVERAGE_APP_FOLDER: Meteor && Meteor.settings && Meteor.settings.coverage && Meteor.settings.coverage.coverage_app_folder\r\n};\r\n\r\nexport const IS_COVERAGE_ACTIVE = meteor_parameters.IS_COVERAGE_ACTIVE ||  process.env['COVERAGE'] === '1';\r\nexport const IS_COVERAGE_VERBOSE = Log.COVERAGE_VERBOSE;\r\nconst ENV_NOT_DEFINED = '/SET/ENV/COVERAGE_APP_FOLDER/OR/READ/README/';\r\n\r\nexport const COVERAGE_APP_FOLDER = meteor_parameters.COVERAGE_APP_FOLDER || process.env['COVERAGE_APP_FOLDER'] || ENV_NOT_DEFINED;\r\n\r\n/* istanbul ignore else */\r\nif (COVERAGE_APP_FOLDER === ENV_NOT_DEFINED) {\r\n  Log.info('Error: COVERAGE_APP_FOLDER is undefined and the coverage will fail.');\r\n}\r\nconst NOT_DEFINED = '/COVERAGE/NOT/ACTIVE/';\r\nlet configuration = {\r\n  exclude: {\r\n    general: [],\r\n    server: [],\r\n    client: []\r\n  },\r\n  include: [],\r\n  output: NOT_DEFINED\r\n};\r\n/* istanbul ignore else */\r\nif (IS_COVERAGE_ACTIVE) {\r\n  const fs = Npm.require('fs'),\r\n    path = Npm.require('path');\r\n\r\n  Log.info('Coverage active');\r\n  let coverageFile = path.join(COVERAGE_APP_FOLDER, '.coverage.json'),\r\n    defaultConfig = JSON.parse(Assets.getText('conf/default-coverage.json'));\r\n\r\n  try {\r\n    fs.accessSync(coverageFile);\r\n    Log.info('Reading custom configuration');\r\n    const configurationString = fs.readFileSync(coverageFile);\r\n    configuration = JSON.parse(configurationString);\r\n    Log.info('[Configuration] ', configuration);\r\n  } catch (e) {\r\n    if (e instanceof SyntaxError) {\r\n      let errMsg = `Error: ${coverageFile} is not a valid JSON`;\r\n      console.error(errMsg, e);\r\n      Log.error(e.stack);\r\n    }\r\n    // Set up defaultConfig value if they are not provided in the .coverage.json file\r\n    Log.info('Loading default configuration, missing configuration file ', coverageFile);\r\n    configuration = defaultConfig;\r\n  }\r\n\r\n  // Don't force to rewrite all the key of configuration.exclude,\r\n  // if they are not defined, the default conf is used.\r\n\r\n  /* istanbul ignore else */\r\n  if (configuration.exclude === undefined) {\r\n    Log.info('Loading default configuration: exclude.*');\r\n    configuration.exclude = defaultConfig.exclude;\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (configuration.exclude.general === undefined) {\r\n    Log.info('Loading default configuration: exclude.general');\r\n    configuration.exclude.general = defaultConfig.exclude.general;\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (configuration.exclude.server === undefined) {\r\n    Log.info('Loading default configuration: exclude.server');\r\n    configuration.exclude.server = defaultConfig.exclude.server;\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (configuration.exclude.client === undefined) {\r\n    Log.info('Loading default configuration: exclude.client');\r\n    configuration.exclude.client = defaultConfig.exclude.client;\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (configuration.include === undefined) {\r\n    Log.info('Loading default configuration: include');\r\n    configuration.include = defaultConfig.include || [];\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (configuration.output === undefined) {\r\n    Log.info('Loading default configuration: output');\r\n    configuration.output = defaultConfig.output;\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (configuration.remapFormat === undefined) {\r\n    Log.info('Loading default configuration: remapFormat');\r\n    configuration.remapFormat = defaultConfig.remapFormat;\r\n  }\r\n}\r\n\r\nexport const COVERAGE_EXPORT_FOLDER = configuration.output;\r\nexport const exclude = configuration.exclude;\r\nexport const include = configuration.include;\r\nexport const remapFormat = configuration.remapFormat;\r\nexport const reportTypes = {\r\n  allowed: ['clover', 'cobertura', 'coverage', 'html', 'json', 'json-summary', 'lcov', 'lcovonly', 'remap', 'teamcity', 'text', 'text-lcov', 'text-summary'],\r\n  pending: ['clover', 'cobertura', 'lcov', 'teamcity', 'text', 'text-lcov']\r\n};\r\n\r\nLog.info('Coverage configuration:');\r\nLog.info('- IS_COVERAGE_ACTIVE=', IS_COVERAGE_ACTIVE);\r\nLog.info('- IS_COVERAGE_VERBOSE=', IS_COVERAGE_VERBOSE);\r\nLog.info('- COVERAGE_APP_FOLDER=', COVERAGE_APP_FOLDER);\r\nLog.info('.coverage.json values:');\r\nLog.info('- exclude=', configuration.exclude);\r\nLog.info('- include=', configuration.include);\r\nLog.info('- remapFormat=', configuration.remapFormat);\r\nLog.info('- COVERAGE_EXPORT_FOLDER=', COVERAGE_EXPORT_FOLDER);\r\n","const meteor_parameters = {\r\n  // /:\\ ES 6\r\n  // return the value OR UNDEFINED\r\n  // THIS IS NOT A BOOLEAN\r\n  VERBOSE: Meteor && Meteor.settings && Meteor.settings.coverage && Meteor.settings.coverage.verbose\r\n};\r\n\r\nexport default Log = {\r\n  COVERAGE_VERBOSE: meteor_parameters.VERBOSE || process.env['COVERAGE_VERBOSE'] === '1' || false,\r\n  error: function() {\r\n    console.error(...arguments);\r\n  },\r\n  info: function() {\r\n    /* istanbul ignore else */\r\n    if (this.COVERAGE_VERBOSE) {\r\n      console.log(...arguments);\r\n    }\r\n  },\r\n  time: function() {\r\n    /* istanbul ignore else */\r\n    if (this.COVERAGE_VERBOSE) {\r\n      console.log(...arguments);\r\n    }\r\n  },\r\n  timeEnd: function() {\r\n    /* istanbul ignore else */\r\n    if (this.COVERAGE_VERBOSE) {\r\n      console.log(...arguments);\r\n    }\r\n  }\r\n};\r\n","import fs from 'fs';\r\nimport mkdirp from 'mkdirp';\r\nimport path from 'path';\r\nimport Log from './../context/log';\r\n\r\nconst istanbulAPI = Npm.require('istanbul-api'),\r\n  Report = istanbulAPI.libReport;\r\n\r\nexport default ReportCommon = {\r\n    /**\r\n     * Alter fs to add a new method writer\r\n     * Used by the istanbul-reports library\r\n     * @param filepath\r\n     * @returns {*|Context}\r\n     */\r\n\r\n  getContext (filepath) {\r\n    let context = Report.createContext();\r\n\r\n    const dirpath = path.dirname(filepath);\r\n    this.checkDirectory(dirpath);\r\n    this.checkFile(filepath);\r\n\r\n    Object.defineProperty(context, 'writer', {\r\n      value: {\r\n        writeFile: function (path) {\r\n          return {\r\n            write: function (data) {\r\n              fs.appendFileSync(path, data);\r\n            },\r\n            println: function (data) {\r\n              fs.appendFileSync(path, data + '\\r\\n');\r\n            },\r\n            close: function () {},\r\n            colorize: function(string) {\r\n              return string;\r\n            }\r\n          };\r\n        }\r\n      }\r\n    });\r\n    return context;\r\n  },\r\n  checkDirectory (dirpath) {\r\n    let succeed = true;\r\n    // Create folder\r\n    try {\r\n      const stat = fs.statSync(dirpath);\r\n    } catch (e) {\r\n      succeed = false;\r\n      Log.info('Creating a new folder', dirpath);\r\n      try {\r\n        mkdirp.sync(dirpath);\r\n      } catch (e) {\r\n        console.error('Something went wrong while creating folder', e, e.stack);\r\n      }\r\n    }\r\n    return succeed;\r\n  },\r\n  checkFile (filepath) {\r\n    let succeed = true;\r\n    // Reset file\r\n    try {\r\n      Log.info('Try to remove the content & create the file', filepath);\r\n      fs.writeFileSync(filepath, '');\r\n    } catch (e) {\r\n      succeed = false;\r\n      console.error('Something went wrong while creating the file', filepath, e, e.stack);\r\n    }\r\n    return succeed;\r\n  }\r\n};\r\n","import fs from 'fs';\r\n\r\nexport default class {\r\n  constructor(res, options) {\r\n    this.res = res;\r\n    this.options = options;\r\n    this.options.filename = this.options.path;\r\n  }\r\n\r\n  generate() {\r\n    let coverage = Core.getCoverageObject();\r\n    var coverageReport = JSON.stringify(coverage),\r\n      reportPath = this.options.path;\r\n    let instance = this;\r\n    fs.writeFile(reportPath, coverageReport, function (err) {\r\n      /* istanbul ignore else */\r\n      if (err) {\r\n        throw 'failed to write report file: ' + reportPath;\r\n      }\r\n      instance.res.end('{\"type\":\"success\"}');\r\n    });\r\n\r\n  }\r\n}\r\n","import CoverageData from './../services/coverage-data';\r\nimport Core from './../services/core';\r\nimport ReportCommon from './report-common';\r\nimport Conf from '../context/conf';\r\n\r\nconst istanbulAPI = Npm.require('istanbul-api'),\r\n  ReportImpl = istanbulAPI.reportsImpl;\r\n/**\r\n * Used by type lcovonly and json\r\n * create the corresponding file using istanbul api\r\n * @type {any}\r\n */\r\nexport default class {\r\n  constructor(res, type, options) {\r\n    this.res = res;\r\n    this.options = options;\r\n    this.report = ReportImpl.create(type, this.options);\r\n    this.report.file = this.options.path;\r\n    this.context = ReportCommon.getContext(this.report.file);\r\n  }\r\n\r\n  generate() {\r\n    const coverage = Core.getCoverageObject();\r\n    let childs = CoverageData.getLcovonlyReport(coverage);\r\n    this.report.onStart(null, this.context);\r\n    /* istanbul ignore else */\r\n    if (childs.length === 0) {\r\n      this.res.setHeader('Content-type', 'text/plain');\r\n      this.res.statusCode = 500;\r\n      return this.res.end('{\"type\":\"No coverage to export\"}');\r\n    }\r\n\r\n    this.writeFile(childs);\r\n    this.res.end('{\"type\":\"success\"}');\r\n  }\r\n\r\n  writeFile(childs) {\r\n    for (let i = 0; i < childs.length; i++) {\r\n      // Remove the COVERAGE_APP_FOLDER from the filepath\r\n      childs[i].fileCoverage.data.path = childs[i].fileCoverage.data.path.replace(Conf.COVERAGE_APP_FOLDER, '');\r\n\r\n      this.report.onDetail(childs[i]);\r\n    }\r\n    this.report.onEnd();\r\n  }\r\n\r\n}\r\n","import CoverageData from '../services/coverage-data';\r\nimport Core from '../services/core';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport ReportCommon from './report-common';\r\nimport Log from './../context/log';\r\nvar istanbulAPI = Npm.require('istanbul-api'),\r\n  Report = istanbulAPI.libReport,\r\n  ReportImpl = istanbulAPI.reportsImpl;\r\nexport default class {\r\n  constructor(res, options) {\r\n    this.res = res;\r\n    this.options = options;\r\n    this.prefix = options.prefix;\r\n    this.options.subdir = this.options.path;\r\n    this.opts = this.generateOpts();\r\n    this.report = ReportImpl.create('html', this.opts);\r\n  }\r\n\r\n  generateOpts() {\r\n    const outputPath = this.options.path;\r\n    return {\r\n      verbose: this.options.verbose,\r\n      linkMapper: {\r\n        getPath: function (node) {\r\n          /* istanbul ignore else */\r\n          if (typeof node === 'string') {\r\n            return node;\r\n          }\r\n          var filePath = node.getQualifiedName();\r\n\r\n          if (node.isSummary()) {\r\n            filePath = path.join(outputPath, 'index.html');\r\n          } else {\r\n            filePath = path.join(outputPath, filePath + '.html');\r\n          }\r\n          return filePath;\r\n        },\r\n        relativePath: function (source, target) {\r\n          return this.getPath(target);\r\n        },\r\n\r\n        assetPath: function (node, name) {\r\n          return path.join(outputPath, name);\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  generate() {\r\n    const folderPath = this.options.path;\r\n    this.copyStatic();\r\n    var coverage = Core.getCoverageObject();\r\n\r\n    /* istanbul ignore else */\r\n    if (!(coverage && Object.keys(coverage).length > 0)) {\r\n      this.res.statusCode = 500;\r\n      return this.res.end('{\"type\":\"failed\", \"message\": \"No coverage information have been collected\"}');\r\n    }\r\n    var root = CoverageData.getTreeReport(coverage);\r\n    let filepath = path.join(folderPath, 'index.html');\r\n\r\n    this.report.onSummary(root, ReportCommon.getContext(filepath));\r\n\r\n    const childrens = root.getChildren();\r\n    const report = this.report;\r\n    // Todo : use future\r\n    childrens.forEach(function (child) {\r\n      var filepath = path.join(folderPath, child.getRelativeName() + '.html');\r\n      Log.info('Creating a new html report', filepath);\r\n      let fileReport = CoverageData.getFileReport(coverage, child.getRelativeName());\r\n      report.onDetail(fileReport, ReportCommon.getContext(filepath));\r\n    });\r\n    this.res.end('{\"type\":\"success\"}');\r\n  }\r\n\r\n  copyStatic() {\r\n    ReportCommon.checkDirectory(this.options.path);\r\n    this.report.onStart(null, this.getFolderContext(this.options.path));\r\n  }\r\n\r\n\r\n  getFolderContext(folderpath) {\r\n    var context = Report.createContext();\r\n    Object.defineProperty(context, 'writer', {\r\n      value: {\r\n        copyFile: function (sourcePath, destPath) {\r\n          fs.readFile(sourcePath, (err, data) => {\r\n            /* istanbul ignore else */\r\n            if (err) throw err;\r\n            let p = path.join(folderpath, destPath);\r\n            fs.writeFile(p, data, (err, data) => {\r\n              /* istanbul ignore else */\r\n              if (err) throw err;\r\n            });\r\n          });\r\n        }\r\n      }\r\n    });\r\n    return context;\r\n  }\r\n}\r\n","import CoverageData from '../services/coverage-data';\r\nimport Conf from '../context/conf';\r\nimport Core from '../services/core';\r\n// If we change Npm.require('istanbul-api') into import a from 'istanbul-api'\r\n// the __dirname change and the  istanbul dependency fails\r\n// See istanbul-reports\r\n// With Npm.require : /Users/Leo/Webstorm/meteor-container/packages/meteor-coverage/.npm/package/node_modules/istanbul-reports/lib/json\r\n\r\nvar istanbulAPI = Npm.require('istanbul-api'),\r\n  Report = istanbulAPI.libReport,\r\n  ReportImpl = istanbulAPI.reportsImpl;\r\nexport default class {\r\n  constructor(res, options) {\r\n    this.res = res;\r\n    this.filepath = '';\r\n    this.options = options;\r\n    this.options.prefix = '/coverage/';\r\n    this.opts = this.createOpts();\r\n  }\r\n\r\n  createOpts() {\r\n    const prefix = this.options.prefix;\r\n    return {\r\n      verbose: Conf.IS_COVERAGE_VERBOSE,\r\n      linkMapper: {\r\n        getPath: function (node) {\r\n          /* istanbul ignore else */\r\n          if (typeof node === 'string') {\r\n            return node;\r\n          }\r\n          return node.getQualifiedName();\r\n        },\r\n        relativePath: function (source, target) {\r\n          return prefix + 'show?p=' + this.getPath(target);\r\n        },\r\n        assetPath: function (node, name) {\r\n          return prefix + 'asset/' + name;\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  generate() {\r\n    var coverage = Core.getCoverageObject();\r\n    /* istanbul ignore else */\r\n    if (!(coverage && Object.keys(coverage).length > 0)) {\r\n      this.res.setHeader('Content-type', 'text/plain');\r\n      return this.res.end('No coverage information has been collected');\r\n    }\r\n    this.res.setHeader('Content-type', 'text/html');\r\n    this.alterFS(this.res);\r\n    var context = this.getContext(this.res);\r\n    var report = ReportImpl.create('html', this.opts);\r\n    if (this.options.filepath) {\r\n      var child = CoverageData.getFileReport(coverage, this.options.filepath);\r\n      report.onDetail(child, context);\r\n    } else {\r\n      var root = CoverageData.getTreeReport(coverage);\r\n      report.onSummary(root, context);\r\n    }\r\n  }\r\n\r\n  getContext(res) {\r\n    var context = Report.createContext();\r\n    Object.defineProperty(context, 'writer', {\r\n      value: {\r\n        writerForDir: {\r\n          writeFile: function () {\r\n            return res;\r\n          }\r\n        },\r\n        writeFile: function () {\r\n          return res;\r\n        }\r\n      }\r\n    });\r\n    return context;\r\n  }\r\n\r\n    // Istanbul-api expect to save HTML report to the file system and not over network\r\n  alterFS(res) {\r\n    res.close = function () {\r\n      this.end();\r\n    };\r\n  }\r\n\r\n}\r\n","import Conf from './../context/conf';\r\nimport CoverageData from './../services/coverage-data';\r\nimport Core from './../services/core';\r\nimport ReportCommon from './report-common';\r\nconst istanbulAPI = Npm.require('istanbul-api'),\r\n  ReportImpl = istanbulAPI.reportsImpl;\r\nexport default class {\r\n  constructor(res, type, options) {\r\n    this.res = res;\r\n    this.options = options;\r\n    /* istanbul ignore next: ternary operator */\r\n    this.options.verbose = Conf.IS_COVERAGE_VERBOSE ? true : false;\r\n    this.report = ReportImpl.create(type, this.options);\r\n\r\n    this.report.file = this.options.path;\r\n    this.context = ReportCommon.getContext(this.report.file);\r\n  }\r\n\r\n  generate() {\r\n    const coverage = Core.getCoverageObject();\r\n    let childs = CoverageData.getLcovonlyReport(coverage);\r\n    this.report.onStart(null, this.context);\r\n    /* istanbul ignore else */\r\n    if (childs.length === 0) {\r\n      this.res.setHeader('Content-type', 'text/plain');\r\n      this.res.statusCode = 500;\r\n      return this.res.end('{\"type\":\"No coverage to export\"}');\r\n    }\r\n    this.writeFile(childs);\r\n    this.res.end('{\"type\":\"success\"}');\r\n  }\r\n\r\n  writeFile (childs) {\r\n    for (let i = 0; i < childs.length; i++) {\r\n      // Remove the COVERAGE_APP_FOLDER from the filepath\r\n      childs[i].fileCoverage.data.path = childs[i].fileCoverage.data.path.replace(Conf.COVERAGE_APP_FOLDER, '');\r\n\r\n      this.report.onDetail(childs[i]);\r\n    }\r\n    ///Todo: not working\r\n    //this.report.onSummary(childs);\r\n    this.report.onEnd();\r\n  }\r\n\r\n}\r\n","import Conf from './../context/conf';\r\nimport Log from './../context/log';\r\nimport ReportCommon from './report-common';\r\nimport IstanbulGenericReporter from './report-generic';\r\nimport path from 'path';\r\nconst remapIstanbul = Npm.require('remap-istanbul');\r\nconst MemoryStore = Npm.require('istanbul/lib/store/memory');\r\n\r\n\r\nexport default class {\r\n  constructor(res, type, options) {\r\n    this.res = res;\r\n\r\n    // Common options\r\n    this.options = options;\r\n\r\n    // JSON report options\r\n    this.pathJSON = path.join(this.options.path, 'summary.json');\r\n\r\n    // remap-istanbul options\r\n    this.remapFolder = path.join(Conf.COVERAGE_EXPORT_FOLDER, '.remap');\r\n    this.remapPath = path.join(Conf.COVERAGE_APP_FOLDER, this.remapFolder);\r\n  }\r\n\r\n  generateJSONReport() {\r\n    const jsonOptions = Object.assign({}, this.options, {path: this.pathJSON});\r\n    let jsonReport = new IstanbulGenericReporter(this.res, 'json', jsonOptions);\r\n    jsonReport.generate();\r\n  }\r\n\r\n  getFilePath(filename) {\r\n    return path.join(this.remapFolder, filename);\r\n  }\r\n\r\n  generate() {\r\n    // We cannot rely on a previous coverage analysis JSON report,\r\n    // so we force its generation here before remapping\r\n    this.generateJSONReport();\r\n\r\n    const cwd = process.cwd();\r\n    process.chdir(Conf.COVERAGE_APP_FOLDER);\r\n\r\n    // Create output directory if not exists\r\n    ReportCommon.checkDirectory(this.remapPath);\r\n\r\n    let reports = {}, allReports = {\r\n        'html': this.remapPath,\r\n        'clover': this.getFilePath('clover.xml'),\r\n        'cobertura': this.getFilePath('cobertura.xml'),\r\n        'teamcity': this.getFilePath('teamcity.log'),\r\n        'text-summary': this.getFilePath('summary.txt'),\r\n        'text': this.getFilePath('report.txt'),\r\n        'lcovonly': this.getFilePath('lcov.info'),\r\n        'json-summary': this.getFilePath('summary.json'),\r\n        'json': this.getFilePath('report.json')\r\n      };\r\n    Conf.remapFormat.forEach((type) => reports[type] = allReports[type]);\r\n    this.remapWrapper(this.pathJSON, reports, this.options).await();\r\n    this.res.end('{\"type\":\"success\"}');\r\n\r\n    // Restore previous working directory\r\n    process.chdir(cwd);\r\n  }\r\n\r\n  remapWrapper(sources, reports, options) {\r\n    let sourceStore = new MemoryStore();\r\n    let collector = remapIstanbul.remap(remapIstanbul.loadCoverage(sources), {\r\n      sources: sourceStore,\r\n      warn: function() {}\r\n    });\r\n\r\n    /* istanbul ignore else */\r\n    if (!Object.keys(sourceStore.map).length) {\r\n      sourceStore = undefined;\r\n    }\r\n\r\n    let p = Object.keys(reports).map((reportType) => {\r\n      let reportOptions = Object.assign({}, this.options, {verbose: reportType === 'html' ? false : true});\r\n      return remapIstanbul.writeReport(collector, reportType, reportOptions, reports[reportType], sourceStore);\r\n    });\r\n\r\n    return Promise.all(p);\r\n  }\r\n}\r\n","import Log from './../context/log';\r\nimport Conf from './../context/conf';\r\nimport IstanbulGenericReporter from './report-generic';\r\nimport JsonSummary from './report-json-summary';\r\n// import Teamcity from './report-teamcity';\r\nimport Html from './report-html';\r\nimport Http from './report-http';\r\nimport ReportCoverage from './report-coverage';\r\nimport ReportRemap from './report-remap';\r\nimport TextSummary from './report-text-summary';\r\nimport path from 'path';\r\n\r\nexport default class {\r\n  generateReport(res, type, options) {\r\n\r\n    options = Object.assign({}, {\r\n      path: path.join(Conf.COVERAGE_APP_FOLDER, Conf.COVERAGE_EXPORT_FOLDER),\r\n      /* istanbul ignore next: ternary operator */\r\n      verbose: Log.COVERAGE_VERBOSE ? true : false\r\n    }, options);\r\n\r\n    Log.info('export coverage using the following format [', type, '] options [', options, ']');\r\n    try {\r\n      switch (type) {\r\n      case 'remap':\r\n        {\r\n          let reportRemap = new ReportRemap(res, type, options);\r\n          reportRemap.generate();\r\n          break;\r\n        }\r\n      case 'lcovonly':\r\n        {\r\n          options = this.addFileToOptions(options, 'lcov.info');\r\n          let istanbulFile1 = new IstanbulGenericReporter(res, type, options);\r\n          istanbulFile1.generate();\r\n          break;\r\n        }\r\n      case 'json':\r\n        {\r\n          options = this.addFileToOptions(options, 'summary.json');\r\n          let istanbulFile2 = new IstanbulGenericReporter(res, type, options);\r\n          istanbulFile2.generate();\r\n          break;\r\n        }\r\n      case 'coverage':\r\n        {\r\n          options = this.addFileToOptions(options, 'report.json');\r\n          let reportCoverage = new ReportCoverage(res, options);\r\n          reportCoverage.generate();\r\n          break;\r\n        }\r\n      /*case 'teamcity':\r\n        {\r\n          options = this.addFileToOptions(options, 'teamcity.log');\r\n          let teamcity = new Teamcity(res, options);\r\n          teamcity.generate();\r\n          break;\r\n        }*/\r\n      case 'json-summary':\r\n        {\r\n          options = this.addFileToOptions(options, 'json_summary.json');\r\n          let jsonSummary = new JsonSummary(res, type, options);\r\n          jsonSummary.generate();\r\n          break;\r\n        }\r\n      case 'html':\r\n        {\r\n          options = Object.assign({}, {\r\n            'prefix': '/coverage/'\r\n          }, options);\r\n          let html = new Html(res, options);\r\n          html.generate();\r\n          break;\r\n        }\r\n      case 'text-summary':\r\n        {\r\n          options = this.addFileToOptions(options, 'summary.txt');\r\n          let textSummary = new TextSummary(res, type, options);\r\n          textSummary.generate();\r\n          break;\r\n        }\r\n      case 'http':\r\n        {\r\n          let http = new Http(res, options);\r\n          http.generate();\r\n          break;\r\n        }\r\n      default:\r\n        {\r\n          Log.error('Failed to export - this type is not implemented yet');\r\n          res.writeHead(400);\r\n          res.end('{\"type\":\"This type [' + type + '] is not supported\"}');\r\n        }\r\n      }\r\n    } catch (e) {\r\n      Log.error('ReportService failed while creating report type [', type, ']');\r\n      console.error(e, e.stack);\r\n      res.writeHead(400);\r\n      res.end('{\"type\":\"error\",\"message\":\"Unexpected error\"}');\r\n    }\r\n  }\r\n  addFileToOptions(options, filename) {\r\n    return Object.assign({}, options, {\r\n      path: path.join(options.path, filename)\r\n    });\r\n  }\r\n}\r\n","import Conf from '../context/conf';\r\nimport CoverageData from '../services/coverage-data';\r\nimport Core from '../services/core';\r\nimport ReportCommon from './report-common';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\nvar istanbulAPI = Npm.require('istanbul-api'),\r\n  Report = istanbulAPI.libReport,\r\n  ReportImpl = istanbulAPI.reportsImpl;\r\n\r\nexport default class {\r\n  constructor(res, type, options) {\r\n    this.res = res;\r\n    this.options = options;\r\n    this.report = ReportImpl.create(type, this.options);\r\n\r\n    this.report.file = this.options.path;\r\n    this.context = this.getContext(this.report.file);\r\n\r\n  }\r\n\r\n  generate() {\r\n    let coverage = Core.getCoverageObject();\r\n    var root = CoverageData.getTreeReport(coverage);\r\n    this.report.onStart(root, this.context);\r\n    this.res.end('{\"type\":\"success\"}');\r\n  }\r\n\r\n  getContext(filepath) {\r\n    const dirpath = path.dirname(filepath);\r\n    ReportCommon.checkDirectory(dirpath);\r\n    ReportCommon.checkFile(filepath);\r\n    var context = Report.createContext();\r\n\r\n\r\n    Object.defineProperty(context, 'writer', {\r\n      value: {\r\n        writeFile: function (path) {\r\n          return {\r\n            write: function (data) {\r\n              fs.appendFileSync(path, data);\r\n            },\r\n            println: function (data) {\r\n              fs.appendFileSync(path, data + '\\r\\n');\r\n            },\r\n            close: function () {\r\n            },\r\n            colorize: function(string) {\r\n              return string;\r\n            }\r\n          };\r\n        }\r\n      }\r\n    });\r\n    return context;\r\n  }\r\n}\r\n","import Conf from './../context/conf';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\nconst istanbulAPI = Npm.require('istanbul-api');\r\nconst Coverage = istanbulAPI.libCoverage;\r\n\r\nlet mergeCoverageWith, importCoverage, getCoverageObject;\r\n\r\ngetCoverageObject = function () {\r\n  /* istanbul ignore next: default assignment */\r\n  global.__coverage__ = global.__coverage__ || {};\r\n  return global.__coverage__;\r\n};\r\n\r\nsetCoverageObject = function (obj) {\r\n  global.__coverage__ = obj;\r\n};\r\n\r\nmergeCoverageWith = function (obj) {\r\n  /* istanbul ignore else */\r\n  if (!obj) {\r\n    return;\r\n  }\r\n  var coverage = getCoverageObject();\r\n  var coverageMap = Coverage.createCoverageMap(coverage);\r\n  coverageMap.addFileCoverage(obj);\r\n  setCoverageObject(coverageMap.toJSON());\r\n};\r\n\r\n\r\n/* istanbul ignore next: default assignment */\r\nimportCoverage = function (res, options = {}) {\r\n  Log.info('import coverage');\r\n  /* istanbul ignore next: ternary operator */\r\n  const filename = options.filename ? options.filename : 'report.json';\r\n  const reportPath = path.join(Conf.COVERAGE_APP_FOLDER, Conf.COVERAGE_EXPORT_FOLDER, filename);\r\n  fs.exists(reportPath, function (exists) {\r\n    /* istanbul ignore else */\r\n    if (!exists) {\r\n      throw 'report file not found: reportPath=' + reportPath + ' COVERAGE_APP_FOLDER=' + Conf.COVERAGE_APP_FOLDER;\r\n    }\r\n    fs.readFile(reportPath, 'utf8', function (err, fileContent) {\r\n      /* istanbul ignore else */\r\n      if (err) {\r\n        throw 'failed to read report file: ' + reportPath;\r\n      }\r\n      let coverageObj = JSON.parse(fileContent);\r\n      for (let property in coverageObj) {\r\n        /* istanbul ignore else */\r\n        if (coverageObj.hasOwnProperty(property)) {\r\n          Core.mergeCoverageWith(coverageObj[property]);\r\n        }\r\n      }\r\n      res.end('{\"type\":\"success\"}');\r\n    });\r\n  });\r\n};\r\nexport default Core = {\r\n  mergeCoverageWith,\r\n  importCoverage,\r\n  getCoverageObject\r\n};\r\n","import Conf from './../context/conf';\r\nimport Instrumenter from './instrumenter';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\n\r\nconst istanbulAPI = Npm.require('istanbul-api');\r\nconst Report = istanbulAPI.libReport;\r\nconst Coverage = istanbulAPI.libCoverage;\r\n\r\nexport default CoverageData = {\r\n  filterCoverageReport: function (report) {\r\n    /* istanbul ignore else */\r\n    if (!report.data) {\r\n      throw 'Invalid report';\r\n    }\r\n    let newData = {};\r\n    for (let property in report.data) {\r\n      /* istanbul ignore else */\r\n      if (report.data.hasOwnProperty(property)) {\r\n        if (this.isAccepted(property)) {\r\n          newData[property] = report.data[property];\r\n        } else {\r\n          Log.info('isRefused', property);\r\n        }\r\n      }\r\n    }\r\n    report.data = newData;\r\n    return report;\r\n  },\r\n  isAccepted: function (filename) {\r\n    // Check if the file was also inside a .map\r\n    /* istanbul ignore else */\r\n    if (filename.indexOf(Conf.COVERAGE_APP_FOLDER) < 0) {\r\n      return false;\r\n    }\r\n\r\n    let isAServerSideFile = filename.indexOf('client') === -1 && filename.indexOf('web.browser') === -1;\r\n    /* istanbul ignore else */\r\n    if (Instrumenter.shouldIgnore(filename, isAServerSideFile)) {\r\n      return false;\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (filename.indexOf('packages/') > 0) {\r\n      Log.time('read access ' + filename);\r\n      const isExist = fs.existsSync(filename);\r\n      Log.timeEnd('read access ' + filename);\r\n      /* istanbul ignore else */\r\n      if (isExist) {\r\n        // Internal package\r\n        return true;\r\n      }\r\n    }\r\n    /* istanbul ignore else */\r\n    if (filename.indexOf('client/') > 0 && filename.indexOf('template.') > 0) {\r\n      /* istanbul ignore else */\r\n      if (fs.existsSync(filename)) {\r\n        // some file\r\n        return true;\r\n      }\r\n      // this is a html template transformed into js file\r\n      return false;\r\n    }\r\n    /* istanbul ignore else */\r\n    if (filename.indexOf('node_modules') > 0) {\r\n      // this is a browser file?\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  },\r\n  getReport: function (coverage) {\r\n    let coverageMap = Coverage.createCoverageMap(coverage);\r\n    coverageMap = SourceMap.lib.transformCoverage(coverageMap).map;\r\n    coverageMap = this.filterCoverageReport(coverageMap);\r\n    return coverageMap;\r\n  },\r\n  getFileReport: function (coverage, filePath) {\r\n    const coverageMap = this.getReport(coverage);\r\n    const node = Report.summarizers.flat(coverageMap);\r\n    const childs = node.getRoot().getChildren();\r\n    let child;\r\n    for (let i = 0; i < childs.length; i++) {\r\n      /* istanbul ignore else */\r\n      if (childs[i].getRelativeName() === filePath) {\r\n        child = childs[i];\r\n      }\r\n    }\r\n    return child;\r\n  },\r\n  getTreeReport: function (coverage) {\r\n    return this.getNodeReport(coverage).getRoot();\r\n  },\r\n  getLcovonlyReport: function (coverage) {\r\n    return this.getTreeReport(coverage).getChildren();\r\n  },\r\n  getNodeReport: function (coverage) {\r\n    const coverageMap = this.getReport(coverage);\r\n    return Report.summarizers.flat(coverageMap);\r\n  }\r\n};\r\n","import {_} from 'meteor/underscore';\r\nimport Log from './../context/log';\r\nimport Conf from './../context/conf';\r\nimport minimatch from 'minimatch';\r\n\r\nconst istanbulAPI = Npm.require('istanbul-api');\r\nconst Instrument = istanbulAPI.libInstrument;\r\nconst Hook = istanbulAPI.libHook;\r\n\r\nlet instrumenter = undefined;\r\n\r\n/**\r\n * hooks `runInThisContext` to add instrumentation to matching files when they are loaded on the server\r\n * @method hookLoader\r\n * @param {Object} opts instrumenter options\r\n */\r\nhookLoader = function (opts) {\r\n  /* istanbul ignore next: default assignment */\r\n  opts = opts || {};\r\n  opts.verbose = true;\r\n  opts.coverageVariable = '__coverage__'; // force this always\r\n\r\n  /* istanbul ignore else */\r\n  if (instrumenter !== undefined) {\r\n    throw 'Instrumenter already defined ! You cannot call this method twice';\r\n  }\r\n  instrumenter = Instrument.createInstrumenter(opts);\r\n  const transformer = instrumenter.instrumentSync.bind(instrumenter);\r\n  Hook.hookRunInThisContext(\r\n    shallInstrumentServerScript,\r\n    transformer,\r\n    {\r\n      verbose: opts.verbose\r\n    }\r\n  );\r\n};\r\n\r\ninstrumentJs = function (content, path, callback) {\r\n  SourceMap.registerSourceMap(path);\r\n  return instrumenter.instrument(content, path, callback);\r\n};\r\n\r\nfileMatch = function (filePath, pattern) {\r\n  return minimatch(filePath, pattern, {dot: true});\r\n};\r\nshouldIgnore = function (filePath, isAServerSideFile) {\r\n  // Force the inclusion of any file using config file\r\n  /* istanbul ignore else */\r\n  if (Conf.include) {\r\n    /* istanbul ignore else */\r\n    if (Conf.include.some(pattern => Instrumenter.fileMatch(filePath, pattern))) {\r\n      Log.info('[Accepted][include]: ', filePath);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (Conf.exclude.general) {\r\n    /* istanbul ignore else */\r\n    if (Conf.exclude.general.some(pattern => Instrumenter.fileMatch(filePath, pattern))) {\r\n      Log.info('[Ignored][exclude.general]: ', filePath);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (Conf.exclude.server && isAServerSideFile) {\r\n    /* istanbul ignore else */\r\n    if (Conf.exclude.server.some(pattern => Instrumenter.fileMatch(filePath, pattern))) {\r\n      Log.info('[Ignored][exclude.server]: ', filePath);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (Conf.exclude.client && !isAServerSideFile) {\r\n    /* istanbul ignore else */\r\n    if (Conf.exclude.client.some(pattern => Instrumenter.fileMatch(filePath, pattern))) {\r\n      Log.info('[Ignored][exclude.client]: ', filePath);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  Log.info('[Accepted][*]: ', filePath);\r\n  return false;\r\n};\r\n\r\nshallInstrumentClientScript = function (fileurl) {\r\n  /* istanbul ignore else */\r\n  if (fileurl.indexOf('.js') > -1) {\r\n    /* istanbul ignore else */\r\n    if (!Instrumenter.shouldIgnore(fileurl, false)) {\r\n      Log.info('[ClientSide][Public] file instrumented: ' + fileurl);\r\n      return true;\r\n    }\r\n    Log.info('[ClientSide][Public] file ignored: ' + fileurl);\r\n    return false;\r\n  }\r\n  return false;\r\n};\r\n\r\n\r\n/**\r\n *\r\n * a match function with signature `fn(file)` that returns true if `file` needs to be instrumented\r\n * if the result is true, it also reads the corresponding source map\r\n * @returns {Function}\r\n */\r\nshallInstrumentServerScript = function (file) {\r\n  var root = __meteor_bootstrap__.serverDir;\r\n  /* istanbul ignore else */\r\n  if (file.indexOf(root) !== 0) {\r\n    Log.info('[ServerSide][OutsideApp] file ignored: ' + file);\r\n    return false;\r\n  }\r\n  file = file.substring(root.length);\r\n  /* istanbul ignore else */\r\n  if (file.indexOf('node_modules') >= 0) {\r\n    Log.info('[ServerSide][node_modules] file ignored: ' + file);\r\n    return false;\r\n  }\r\n  if (file.indexOf('packages') === 1) {\r\n    /* istanbul ignore else */\r\n    if (!Instrumenter.shouldIgnore(file, true)) {\r\n      SourceMap.registerSourceMap(root + file);\r\n      return true;\r\n    }\r\n  } else {\r\n    /* istanbul ignore else */\r\n    if (!Instrumenter.shouldIgnore(root + file, true)) {\r\n      SourceMap.registerSourceMap(root + file);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport default Instrumenter = {\r\n  hookLoader,\r\n  instrumentJs,\r\n  shouldIgnore,\r\n  fileMatch,\r\n  shallInstrumentClientScript,\r\n  shallInstrumentServerScript\r\n};\r\n","import Log from './../context/log';\r\nimport Conf from './../context/conf';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\nconst homedir = Npm.require('homedir');\r\nconst istanbulAPI = Npm.require('istanbul-api');\r\nconst libSourceMaps = istanbulAPI.libSourceMaps;\r\n\r\nconst sourceMap = libSourceMaps.createSourceMapStore({verbose: Conf.IS_COVERAGE_ACTIVE});\r\nconst meteorDir = Conf.COVERAGE_APP_FOLDER;\r\nconst splitToken = String.fromCharCode(56507) + 'app/'; // caution! magic character inside the SourceMap source(s) path\r\n\r\nconst abspath = {\r\n  local: path.join(__meteor_bootstrap__.serverDir, '..', '..', '..'), // could use process.env.METEOR_SHELL_DIR too\r\n  currentBuild: path.join(__meteor_bootstrap__.serverDir, '..'),\r\n  serverSide: __meteor_bootstrap__.serverDir,\r\n  clientSide: path.join(__meteor_bootstrap__.serverDir, '..', 'web.browser'),\r\n  // Meteor packages folder can be overriden with the env var PACKAGE_DIRS, otherwise '$HOME/.meteor/packages'.\r\n  // Read https://guide.meteor.com/writing-atmosphere-packages.html#overriding-atmosphere-packages\r\n  packages: process.env.PACKAGE_DIRS || path.join(homedir(), '.meteor', 'packages')\r\n};\r\nconst rgx = {\r\n  meteorCompiledTemplate: /\\/template\\.[^\\.\\/]+\\.js$/,\r\n  meteorPackageMergedFile: /^\\/packages\\/(local-test_)?(?:([^\\/_]+)_)?([^\\/_]+).js$/,\r\n  meteorPackagePathTokens: /^(?:packages\\/|node_modules\\/meteor\\/)(?:local-test[_:])?(([^_:\\/]+[_:])?([^_:\\/]+))\\/(.*node_modules\\/)?(.*)$/,\r\n  meteorPUT: /^local-test:((?:[^_:\\/]+:)?[^_:\\/]+)$/,\r\n  packageJson: /^(?:\\.\\.\\/npm\\/node_modules\\/(.*)|\\.\\.\\/\\.\\.\\/(?:(?!node_modules).)*(.*)|.*node_modules\\/(.*))$/\r\n};\r\n\r\nisAccessible = function(path, mode = fs.R_OK, supressErrors = false) {\r\n  try {\r\n    fs.accessSync(path, mode);\r\n    return true;\r\n  } catch (e) {\r\n    /* istanbul ignore else */\r\n    if (!supressErrors) {\r\n      Log.error('Cannot access', path);\r\n    }\r\n    return false;\r\n  }\r\n};\r\n\r\nparseJSON = function(filePath, supressAccessErrors = false) {\r\n  /* istanbul ignore else */\r\n  if (isAccessible(filePath, fs.R_OK, supressAccessErrors)) {\r\n    try {\r\n      return JSON.parse(fs.readFileSync(filePath, 'utf8'));\r\n    } catch(e) {\r\n      /* istanbul ignore next: Meteor should have saved an invalid JSON, quite improbable */\r\n      Log.error('Invalid JSON:', filePath, e);\r\n    }\r\n  }\r\n};\r\n\r\ninitialSetup = function () {\r\n  // Get the resolved, compiled and used packages and their versions\r\n  let resolverResultPath = path.join(abspath.local, 'resolver-result-cache.json');\r\n  let resolverResult = parseJSON(resolverResultPath);\r\n  /* istanbul ignore next: ternary operator */\r\n  this.resolved = resolverResult ? resolverResult.lastOutput.answer : null;\r\n\r\n  /* istanbul ignore else */\r\n  if (Meteor.isPackageTest) {\r\n    /* istanbul ignore else */\r\n    if (this.resolved) {\r\n      // Find the package(s) under test (PUT)\r\n      for (let pkg in this.resolved) {\r\n        /* istanbul ignore else */\r\n        if (this.resolved.hasOwnProperty(pkg)) {\r\n          let match = rgx.meteorPUT.exec(pkg);\r\n          match && (this.PUT[match[1]] = true);\r\n        }\r\n      }\r\n      const PUTs = Object.keys(this.PUT);\r\n      /* istanbul ignore else */\r\n      if (PUTs.length) {\r\n        Log.info(`Packages under test (${PUTs.length}):`, PUTs.join(', '));\r\n      } else {\r\n        Log.error('No packages under test in test-packages mode');\r\n      }\r\n    }\r\n\r\n    // Check if testing from inside (pkg/) or outside (app/). We test all the merged files of meteor package(s) tests(s)\r\n    // assuming that `meteor test-packages` was exec from the package folder which the merged test file belongs to:\r\n    //  - If none can be accessed, then command is exec from app-dir\r\n    //  - If one can be accessed, then command is exec from pkg-dir of that package\r\n    // The possibilities when testing packages are:\r\n    //  1. `app/packages/pkg$ meteor test-packages ...opts`     inside (COVERAGE_APP_FOLDER points to app/packages/pkg/), test N packages\r\n    //  2. `app/packages/pkg$ meteor test-packages ./ ...opts`  inside (COVERAGE_APP_FOLDER points to app/packages/pkg/), test 1 package\r\n    //  3. `app$ meteor test-packages ...opts`                  outside (COVERAGE_APP_FOLDER points to app/), test N packages\r\n    //  4. `app$ meteor test-packages author:pkg...opts`        outside (COVERAGE_APP_FOLDER points to app/), test 1 package\r\n    //  5. `app$ meteor test-packages packages/pkg...opts`      outside (COVERAGE_APP_FOLDER points to app/), test 1 package\r\n    // NOTE: `...opts` represents the remaining command options (`--driver-package`, etc.)\r\n    const sidePaths = {\r\n      load: abspath.serverSide,\r\n      manifest: abspath.clientSide\r\n    };\r\n    for (let key in sidePaths) {\r\n      /* istanbul ignore else */\r\n      if (sidePaths.hasOwnProperty(key)) {\r\n        const programPath = path.join(sidePaths[key], 'program.json');\r\n        const program = parseJSON(programPath);\r\n        /* istanbul ignore next: file automatically created by Meteor, so really rare to enter here */\r\n        if (!program) continue;\r\n\r\n        for (let file of program[key]) {\r\n          let isTestFile, matchAuthor, matchName, match = rgx.meteorPackageMergedFile.exec(`/${file.path}`);\r\n          // If it's a meteor package test(s) merged file and the package has tests (the merged file is created whether\r\n          // the package has tests file(s) declared in `package.js` inside `Package.onTest()` or not). The way to know\r\n          // whether the package has tests or not is looking at file.sourceMap: if it's empty, it has no tests.\r\n          /* istanbul ignore else */\r\n          if (match && match[1] && file.sourceMap) {\r\n            [, isTestFile, matchAuthor, matchName] = match;\r\n            const sourceMapPath = path.join(sidePaths[key], file.sourceMap);\r\n            const sourceMap = parseJSON(sourceMapPath);\r\n            /* istanbul ignore else */\r\n            if (!sourceMap) continue; // jump to the next file if SourceMap non-accessible or invalid\r\n\r\n            // A compiled test file (local-test_...) has only the declared test\r\n            // files inside `package.js` as its sources, so check the first one\r\n            this.testingFromPackageDir = `${matchAuthor}:${matchName}`;\r\n            let filepathToCheck = fixSourcePath.call(this, sourceMap.sources[0], null, meteorDir);\r\n            if (!isAccessible(filepathToCheck, fs.R_OK, true)) {\r\n              this.testingFromPackageDir = false;\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      /* istanbul ignore else */\r\n      if (this.testingFromPackageDir) break;\r\n    }\r\n  }\r\n};\r\n\r\n// Alter inside the source map the path of each sources\r\nalterSourceMapPaths = function (map, isClientSide) {\r\n  // Absolute path to sources of a Meteor package. PUTs are treated differently than normal because they\r\n  // might not exist at abspath.packages, so PUT packages always are resolved depending on\r\n  // COVERAGE_APP_FOLDER and whether `meteor test-packages` was executed from inside/outside the package\r\n  // folder. Sources base of any Meteor packages not under test is always resolved to abspath.packages\r\n  let sourcesBase, isTestFile, matchAuthor, matchName;\r\n  /* istanbul ignore else */\r\n  if (rgx.meteorPackageMergedFile.test(map.file)) {\r\n    [, isTestFile, matchAuthor, matchName] = rgx.meteorPackageMergedFile.exec(map.file);\r\n    /* istanbul ignore next: ternary operator */\r\n    const packageID = matchAuthor ? `${matchAuthor}:${matchName}` : matchName;\r\n    if (Meteor.isPackageTest && (!!isTestFile || this.PUT[packageID])) {\r\n      // If exec `meteor test-packages` from `meteor-app-dir/packages/pkg-dir/` then Meteor performs tests on ALL\r\n      // packages at `meteor-app-dir/packages`, just like exec `meteor test-packages` from `meteor-app-dir/`, but\r\n      // this affects `sourcesBase` for PUTs, because PUTs outside COVERAGE_APP_FOLDER must change their sourcesBase\r\n      if (this.testingFromPackageDir) {\r\n        sourcesBase = this.testingFromPackageDir === packageID ? meteorDir : path.join(meteorDir, '..', matchName);\r\n      } else {\r\n        sourcesBase = path.join(meteorDir, 'packages', matchName);\r\n      }\r\n    } else {\r\n      /* istanbul ignore else */\r\n      if (this.resolved[packageID]) {\r\n        /* istanbul ignore next: ternary operator */\r\n        const packageFolder = matchAuthor ? `${matchAuthor}_${matchName}` : matchName;\r\n        sourcesBase = path.join(abspath.packages, packageFolder, this.resolved[packageID], 'web.browser');\r\n      }\r\n    }\r\n  }\r\n\r\n  // Get `node_modules` base path for this map.file\r\n  let nodeModulesBase, program = parseJSON(path.join(abspath.serverSide, 'program.json'));\r\n  /* istanbul ignore else */\r\n  if (!isClientSide && program) {\r\n    // Find the item matching map.file path\r\n    const mergedPath = map.file.substr(1);\r\n    for (let file of program.load) {\r\n      /* istanbul ignore else */\r\n      if (file.path === mergedPath) {\r\n        /* istanbul ignore else */\r\n        if (file.node_modules) {\r\n           try {\r\n             nodeModulesBase = path.join(abspath.serverSide, file.node_modules);\r\n             nodeModulesBase = fs.realpathSync(nodeModulesBase); // usually a symlink\r\n          } catch (e) {\r\n             if (e.code === 'ENOENT') {\r\n               Log.info('File not found!', nodeModulesBase);\r\n            } else {\r\n               throw e;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  /* istanbul ignore else */\r\n  if (!nodeModulesBase && sourcesBase) {\r\n    // Try locating node_modules inside sourcesBase sibling `npm`\r\n    let sourcesSiblingFolder = path.join(sourcesBase, '..', 'npm', 'node_modules');\r\n    /* istanbul ignore else */\r\n    if (isAccessible(sourcesSiblingFolder, fs.R_OK, true)) {\r\n      nodeModulesBase = sourcesSiblingFolder;\r\n    }\r\n  }\r\n\r\n  // Fix sources paths, but be aware that, although you might be tempted to remove items\r\n  // from map.{sources|contentSources} (like non-instrumentable files: *.css, *.json,...),\r\n  // you must NOT do it, because their indexes are still being used by the mappings and\r\n  // you'll get a sound `Error('No element indexed by {index}')`.\r\n  for (let i = 0; i < map.sources.length; i++) {\r\n    // Meteor templates are not saved into files, but included in sourcesContent\r\n    /* istanbul ignore else */\r\n    if (rgx.meteorCompiledTemplate.test(map.sources[i])) {\r\n      Log.info('Skipping Meteor template:', map.sources[i]);\r\n      continue;\r\n    }\r\n\r\n    let fixed = fixSourcePath.call(this, map.sources[i], nodeModulesBase, sourcesBase);\r\n\r\n    if (map.sources[i] === fixed) {\r\n      Log.error('Source could not be altered:', map.sources[i]);\r\n    } else if (isAccessible(fixed)) {\r\n      map.sources[i] = fixed;\r\n    } else {\r\n      Log.error('Altered source could not be accessed:', map.sources[i]);\r\n    }\r\n  }\r\n  return map;\r\n};\r\n\r\n// Fixes path of a source (file) in the SourceMap of a concatenated Meteor package test file\r\nfixSourcePath = function(source, nodeModulesBase, sourcesBase) {\r\n  let match, paths = source.split(splitToken).slice(1);\r\n\r\n  // Skip sources with unknown syntax\r\n  /* istanbul ignore else */\r\n  if (!paths.length) {\r\n    Log.error('Source with unknown format:', source);\r\n    return source;\r\n  }\r\n\r\n  // The source is the package.json of a NPM dependency. Catches all next patterns:\r\n  //  1. meteor://💻app/.npm/package/node_modules/minimatch/package.json\r\n  //    [1 may be @ nodeModulesBase (when non-PUT) or sourcesBase (when PUT)]\r\n  //  2. meteor://💻app/../npm/node_modules/meteor-babel-helpers/package.json (package NPM dep)\r\n  //  3. meteor://💻app/../../app-dir/node_modules/meteor-node-stubs/node_modules/string_decoder/package.json\u001b (app NPM dep)\r\n  //  4. meteor://💻app/node_modules/http-errors/node_modules/inherits/package.json\r\n  //  5. meteor://💻app/node_modules/content-type/package.json\r\n  /* istanbul ignore else */\r\n  if (paths[0].endsWith('/package.json')) {\r\n    match = rgx.packageJson.exec(paths[0]);\r\n    /* istanbul ignore else */\r\n    if (match) {\r\n      /* istanbul ignore else */\r\n      if (match[2]) { // covers 3 (app NPM dep package.json)\r\n        return path.join(meteorDir, match[2]);\r\n      }\r\n      /* istanbul ignore else */\r\n      if (match[3] && nodeModulesBase) {\r\n        // covers 1 (when non-PUT), 4 and 5 (meteor pkg NPM dep package.json)\r\n        return path.join(nodeModulesBase, match[3]);\r\n      }\r\n      return path.join(sourcesBase, paths[0]); // covers 1 (when PUT) and 2\r\n    }\r\n  }\r\n\r\n  // The source is a Meteor package file (NPM dep or own file). Catches all next patterns:\r\n  //  6. meteor://💻app/packages/lmieulet:meteor-coverage/server/index.js\r\n  //  7. meteor://💻app/packages/local-test:lmieulet:meteor-coverage/server/tests.js\r\n  //  8. meteor://💻app/node_modules/meteor/lmieulet:meteor-coverage/node_modules/minimatch/minimatch.js\r\n  //  9. meteor://💻app/node_modules/meteor/local-test:cgalvarez:my-package/tests/client/mocks.js\r\n  //  10. meteor://💻app/node_modules/meteor/local-test:cgalvarez:my-package/node_modules/chai-as-promised/lib/chai-as-promised.js\r\n  //  11. meteor://💻app/node_modules/meteor/local-test:kadira:flow-router/node_modules/page/node_modules/path-to-regexp/node_modules/isarray/index.js\r\n  let matchPackageID, matchAuthor, matchName, matchNpmDepPath, matchPath;\r\n  match = rgx.meteorPackagePathTokens.exec(paths[0]);\r\n  /* istanbul ignore else */\r\n  if (match) {\r\n    [, matchPackageID, matchAuthor, matchName, matchNpmDepPath, matchPath] = match;\r\n    /* istanbul ignore else */\r\n    if (this.PUT[matchPackageID]) { // PUT\r\n      /* istanbul ignore else */\r\n      if (matchNpmDepPath) {\r\n        // There is no way to know a priori if it's a recursive dep or not\r\n        let recNpmDep = path.join(sourcesBase, '.npm', 'package', matchNpmDepPath, matchPath);\r\n        /* istanbul ignore else */\r\n        if (isAccessible(recNpmDep, fs.R_OK, true)) {\r\n          return recNpmDep; // check if recursive dep (11) of PUT\r\n        }\r\n        return path.join(sourcesBase, '.npm', 'package', 'node_modules', matchPath); // first level dep (10) of PUT\r\n      }\r\n      return path.join(sourcesBase, matchPath); // covers 6,7,8,9 when PUT\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (Meteor.isPackageTest) {\r\n      return path.join(matchNpmDepPath ? nodeModulesBase : sourcesBase, matchPath); // non PUT\r\n    }\r\n\r\n    // Package inside app-dir/packages on `meteor test ...`\r\n    return path.join(meteorDir, 'packages', matchName, matchPath);\r\n  }\r\n\r\n  // Meteor app file\r\n  return path.join(meteorDir, paths[0]);\r\n};\r\n\r\n// Processes the source map (when exists) of an instrumented file to fix broken sources paths\r\nregisterSourceMap = function(filepath) {\r\n  const sourceMapPath = filepath + '.map';\r\n  let fileContent = parseJSON(sourceMapPath, true);\r\n  if (fileContent) {\r\n    Log.time('registerSourceMap', filepath);\r\n    fileContent = alterSourceMapPaths.call(this, fileContent,\r\n      filepath.startsWith('../web.browser/') || filepath.startsWith(abspath.clientSide));\r\n    Log.info('Add source map for file', sourceMapPath);\r\n    sourceMap.registerMap(filepath, fileContent);\r\n    Log.timeEnd('registerSourceMap', filepath);\r\n  } else {\r\n    Log.info('Source map not found', sourceMapPath);\r\n  }\r\n};\r\n\r\nexport default SourceMap = {\r\n  initialSetup,\r\n  lib: sourceMap,\r\n  PUT: {},                          // Meteor package(s) under test\r\n  registerSourceMap,\r\n  resolved: undefined,              // Meteor packages in use and their version\r\n  testingFromPackageDir: undefined  // Whether `meteor test-packages` is run from inside/outside the package dir\r\n};\r\n"]}}]